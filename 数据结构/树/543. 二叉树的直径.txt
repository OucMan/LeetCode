################题目描述####################

给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。

示例 :
给定二叉树

          1
         / \
        2   3
       / \     
      4   5    
返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。

注意：两结点之间的路径长度是以它们之间边的数目表示。

###################思路#####################

经过二叉树的直径最大长度可能出现在经过根节点的情况（左子树高+右子树高），或者等于左右子树的直径最大长度

####################代码###################

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        max_left = self.height(root.left)
        max_right = self.height(root.right)

        return max(max_left + max_right, self.diameterOfBinaryTree(root.left), self.diameterOfBinaryTree(root.right))
    
    def height(self, root):
        if not root:
            return 0
        return max(self.height(root.left), self.height(root.right)) + 1

    
