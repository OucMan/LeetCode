################题目描述###################

给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 

注意: 您可以假设树（即给定的根节点）不为 NULL。

###############代码#################

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        queue = [root]
        current = []
        nextLayer = []
        while queue:
            tmp = queue.pop(0)
            current.append(tmp)
            if tmp.left:
                nextLayer.append(tmp.left)
            if tmp.right:
                nextLayer.append(tmp.right)
            if not queue:
                if not nextLayer:
                    return current[0].val
                else:
                    current = []
                    queue = nextLayer
                    nextLayer = []
        

#########################################

还有一个简单的方法，每次入队列时，首先将右节点入队列，这样最后的一个节点就是最后一行的最左节点

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        queue = [root]
        tmp = None
        while queue:
            tmp = queue.pop(0)
            if tmp.right:
                queue.append(tmp.right)
            if tmp.left:
                queue.append(tmp.left)
        return tmp.val
        
