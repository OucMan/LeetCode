############题目描述##############

给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。

假定 BST 有如下定义：

结点左子树中所含结点的值小于等于当前结点的值
结点右子树中所含结点的值大于等于当前结点的值
左子树和右子树都是二叉搜索树
例如：
给定 BST [1,null,2,2],

   1
    \
     2
    /
   2
返回[2].

提示：如果众数超过1个，不需考虑输出顺序

###############思路#################
首先中序遍历，将结果存储在字典中，然后得到结果

#############代码###################

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):

    def findMode(self, root):
        lists={}
        self.inOrder(root, lists)
        res = sorted(lists.items(), key=lambda d: d[1],reverse=True)
        return [x[0] for x in res if x[1] == res[0][1]]

    def inOrder(self,root, lists):
        if root is None :
            return
        self.inOrder(root.left, lists)
        if root.val in lists:
            lists[root.val]= lists[root.val]+1
        else:
            lists[root.val]=1
        self.inOrder(root.right, lists)
