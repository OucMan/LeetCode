################题目描述################

给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。

 

示例：

输入：

   1
    \
     3
    /
   2

输出：
1

解释：
最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。

##############思路#################

中序遍历，然后寻找最小的间隙

#############代码###################

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    res = float("inf")
    pre = None
    def getMinimumDifference(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return None
        self.inOrder(root)
        return self.res
    
    def inOrder(self, root):
        if not root:
            return
        self.inOrder(root.left)
        if self.pre:
            self.res = min(self.res, root.val-self.pre.val)
        self.pre = root
        self.inOrder(root.right)


