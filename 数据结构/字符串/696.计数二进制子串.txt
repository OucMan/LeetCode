##############题目描述##################

给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
注意：

s.length 在1到50,000之间。
s 只包含“0”或“1”字符。


#####################代码1######################

class Solution(object):
    def countBinarySubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        l = list(map(len, s.replace('01','0 1').replace('10','1 0').split(' ')))
        res = [min(a,b) for a,b in zip(l,l[1:])]
        return sum(res)
        
注：map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。

zip函数的原型为：zip([iterable, …])

参数iterable为可迭代的对象，并且可以有多个参数。该函数返回一个以元组为元素的列表，其中第 i 个元组包含每个参数序列的第 i 个元素。返回的列表长度被截断为最短的参数序列的长度。只有一个序列参数时，它返回一个1元组的列表。没有参数时，它返回一个空的列表。

因此上述代码的作用为：首先获得字符串中连续0和1子字符串的长度，然后循环处理相邻的两个子字符串，两个子字符串的最短的长度就这两个字符串可以组成的符合要求的字符串的数目

#################代码2#################

#########超时

class Solution:
    def countBinarySubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if(len(s)<2 or s.count('0')==len(s) or s.count('1')==len(s)):
            return 0
        s2='01'
        s3='10'
        out=0
        while(s.count(s2) or s.count(s3)):
            out+=s.count(s2)
            s2='0'+s2+'1'
            out+=s.count(s3)
            s3='1'+s3+'0'
        return out

