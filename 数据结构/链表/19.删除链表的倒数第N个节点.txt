################题目#################

给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？

################思路####################

快慢指针：首先快指针向前移动n个距离，然后慢指针从头开始和快指针一起向前移动。这样，当快指针的下一个节点时NONE时，慢指针后面的那个节点是题目要求的被删除的节点

################代码######################

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        if not head:
            return None

        p = q = head

        while n > 0:
            p = p.next
            n = n - 1

        if not p:
            return head.next

        while p.next:
            q = q.next
            p = p.next 
        q.next = q.next.next
        return head

