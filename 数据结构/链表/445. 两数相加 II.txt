#############题目描述###############

给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

进阶：

如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。

示例：

输入：(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 8 -> 0 -> 7

################思路###################

使用栈将链表保存起来

##################代码#################

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        a = []
        b = []
        while l1:
            a.append(l1.val)
            l1 = l1.next
        while l2:
            b.append(l2.val)
            l2 = l2.next
        tmp = 0
        result = []
        while a and b:
            t = a.pop() + b.pop() + tmp
            if t > 9:
                result.append(t - 10)
                tmp = 1
            else:
                result.append(t)
                tmp = 0
        while a:
            t = a.pop() + tmp
            if t > 9:
                result.append(t - 10)
                tmp = 1
            else:
                result.append(t)
                tmp = 0
        while b:
            t = b.pop() + tmp
            if t > 9:
                result.append(t - 10)
                tmp = 1
            else:
                result.append(t)
                tmp = 0
        if tmp == 1:
            result.append(1)

        head = ListNode(-1)
        node = head
        while result:
            n = ListNode(result.pop())
            node.next = n
            node = n
        node.next = None
        return head.next


