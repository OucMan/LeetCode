#############题目描述#####################

编写一个程序，找到两个单链表相交的起始节点。

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。

################解题思路###################

首先得到两个链表的长度之差，较长的链表首先遍历长度之差的距离，然后两个链表一起遍历

##################代码#####################

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if not headA or not headB:
            return None
        la = 0
        lb = 0
        pa = headA
        pb = headB
        while pa:
            la = la + 1
            pa = pa.next
        while pb:
            lb = lb + 1
            pb = pb.next
        
        step = abs(la - lb)
        pa = headA
        pb = headB
        if la >= lb:
            while step > 0:
                pa = pa.next
                step = step - 1
        else:
            while step > 0:
                pb = pb.next
                step = step - 1
        while pa and pb:
            if pa == pb:
                return pa
            pa = pa.next
            pb = pb.next
        return None
