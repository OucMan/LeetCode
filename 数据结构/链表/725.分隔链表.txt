################题目描述###################

给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。

每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。

这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。

返回一个符合上述规则的链表的列表。

举例： 1->2->3->4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]

示例 1：

输入: 
root = [1, 2, 3], k = 5
输出: [[1],[2],[3],[],[]]
解释:
输入输出各部分都应该是链表，而不是数组。
例如, 输入的结点 root 的 val= 1, root.next.val = 2, \root.next.next.val = 3, 且 root.next.next.next = null。
第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。
最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。
示例 2：

输入: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
解释:
输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。
 

提示:

root 的长度范围： [0, 1000].
输入的每个节点的大小范围：[0, 999].
k 的取值范围： [1, 50].

###############解题思路####################

首先获得链表的长度，然后得到结果集合中每一段链表的长度（总长度除以k，商s为每一段的基础长度，余数y表示为前y段链表在基础长度的基础上+1），根据这个长度依次拆分链表。

###################代码####################

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def splitListToParts(self, root, k):
        """
        :type root: ListNode
        :type k: int
        :rtype: List[ListNode]
        """

        l = 0
        node = root
        while node:
            l = l + 1
            node = node.next
        s = l / k
        y = l % k

        cutl = [0]
        for i in range(1, k+1):
            if i <= y:
                cutl.append(s+1)
            else:
                cutl.append(s)
        result = []
        for cl in cutl[1:]:
            i = 0
            tmp=tmp2=ListNode(-1)
            while i < cl:
                tmp.next = root
                tmp = root
                i = i + 1
                root = root.next
            if i > 0:
                tmp.next = None
            result.append(tmp2.next)

        return result
            
