################题目描述################

数组arr是[0, 1, ..., arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。

我们最多能将数组分成多少块？

示例 1:

输入: arr = [4,3,2,1,0]
输出: 1
解释:
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。
示例 2:

输入: arr = [1,0,2,3,4]
输出: 4
解释:
我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。
注意:

arr 的长度在 [1, 10] 之间。
arr[i]是 [0, 1, ..., arr.length - 1]的一种排列。

###############思路################

如果想要每个chunk排序拼接之后，得到的总chunk有序，那么说明每个chunk里面数字应该在某个区间内才可以。否则在chunk内进行排序，拼接之后会和其他的chunk的元素顺序不匹配。

因为所有数字是[0, 1, ..., arr.length - 1]的一个排列，很容易想到，一个区间内的最大的数字，不应该大于这个区间最右的index。

因此，我们从左向右进行遍历，如果已经观测到的最大值小于等于这个区间的index，那么就可以划分区间了。

################代码###################

class Solution(object):
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        if not arr:
            return 0
        res = 0
        maxv = 0
        for i, v in enumerate(arr):
            if v > maxv:
                maxv = v
            if maxv == i:
                res += 1
        return res
