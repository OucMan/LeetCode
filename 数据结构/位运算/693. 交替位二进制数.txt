###############题目描述###############

给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。

示例 1:

输入: 5
输出: True
解释:
5的二进制数是: 101
示例 2:

输入: 7
输出: False
解释:
7的二进制数是: 111
示例 3:

输入: 11
输出: False
解释:
11的二进制数是: 1011
 示例 4:

输入: 10
输出: True
解释:
10的二进制数是: 1010

#################思路#################

假如一个正整数的的二进制位01交错，则向右移位后，再与原数异或得到的结果的二进制都是1

################代码####################

class Solution(object):
    def hasAlternatingBits(self, n):
        """
        :type n: int
        :rtype: bool
        """
        l = n ^ (n >> 1)
        return True if bin(l)[2:].count('0') == 0 else False
        



