##############题目描述####################

使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。

#################思路########################

使用两个队列，一个队列负责入栈，当出栈时，需要将一个队列中的元素出队列，直到该队列中只有一个元素位置，即为栈顶元素

#################代码######################

class MyStack(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.inQueue = []
        self.outQueue = []


    def push(self, x):
        """
        Push element x onto stack.
        :type x: int
        :rtype: None
        """
        self.inQueue.append(x)


    def pop(self):
        """
        Removes the element on top of the stack and returns that element.
        :rtype: int
        """
        while len(self.inQueue) > 1:
            self.outQueue.append(self.inQueue.pop(0))
        tmp = self.inQueue.pop(0)
        self.inQueue = self.outQueue
        self.outQueue = []
        return tmp

    def top(self):
        """
        Get the top element.
        :rtype: int
        """
        if not self.inQueue:
            return None

        while len(self.inQueue) > 1:
            self.outQueue.append(self.inQueue.pop(0))
        
        tmp = self.inQueue[0]
        self.outQueue.append(self.inQueue.pop(0))
        self.inQueue = self.outQueue
        self.outQueue = []
        return tmp


    def empty(self):
        """
        Returns whether the stack is empty.
        :rtype: bool
        """
        if not self.inQueue:
            return True
        else:
            return False



# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
