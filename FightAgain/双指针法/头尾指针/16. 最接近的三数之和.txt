# 题目

给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

示例：

输入：nums = [-1,2,1,-4], target = 1
输出：2
解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。
 

提示：

3 <= nums.length <= 10^3
-10^3 <= nums[i] <= 10^3
-10^4 <= target <= 10^4


# 思路

排序，固定一个数，然后利用头尾指针来得到计算得到最接近的三个元素和

# 代码

class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums or len(nums) < 3:
            return
        nums.sort()
        n = len(nums)
        cha = float('inf')
        res = 0

        for i in range(n):
            l, r = i+1, n-1
            while l < r:
                if nums[i] + nums[l] + nums[r] == target:
                    return target
                elif nums[i] + nums[l] + nums[r] < target:
                    if target - (nums[i] + nums[l] + nums[r]) < cha:
                        cha = target - (nums[i] + nums[l] + nums[r])
                        res = nums[i] + nums[l] + nums[r]
                    l += 1
                else:
                    if nums[i] + nums[l] + nums[r] - target < cha:
                        cha = nums[i] + nums[l] + nums[r] - target
                        res = nums[i] + nums[l] + nums[r]
                    r -= 1
        
        return res

