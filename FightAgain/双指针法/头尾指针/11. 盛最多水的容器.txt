# 题目

给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器。
示例 1：

输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：

输入：height = [1,1]
输出：1
示例 3：

输入：height = [4,3,2,1,4]
输出：16
示例 4：

输入：height = [1,2,1]
输出：2
 

提示：

n = height.length
2 <= n <= 3 * 104
0 <= height[i] <= 3 * 104




# 思路

头尾指针，首先两个指针l,r之间的矩形面积为(r - l) * min(height[l], height[r])， 我们应该将高度矮的那一边进行移动，才有可能出现更大的值。比如height[l]小于height[r]，那么计算面积的时候就是按照height[l]计算的，这时为了获得可能更大的面积，我们应该移动l，因为假如移动r，那么假如移动后右边的高度更高，那么面积计算还是根据height[l]，因为两者之间距离小了，所以面积会小；假如移动后右边矮了（小于height[l]），那么面积计算就根据height[r]，此时面积也是变小。因此那边矮，我们移动那边的指针，从而获得可能的更大的值。


# 代码

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        res = 0
        l, r = 0, len(height) - 1

        while l < r:
            res = max(res, (r - l) * min(height[l], height[r]))
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        
        return res

