# 题目

给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。


# 思路

二分查找

数字都在都在1，n之间，我们得到中间值，然后统计数字大小在1到中间值mid的个数，如果个数小于等于mid个，则说明，重复数出现在mid+1到n，因此移动左边界到mid+1，否则移动右边界到mid


# 代码

class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l, r = 1, len(nums)-1
        while l < r:
            mid = l + (r-l) //2
            c = 0
            for n in nums:
                if n <= mid:
                    c += 1
            if c <= mid:
                l = mid + 1
            else:
                r = mid
        return l
        
        
