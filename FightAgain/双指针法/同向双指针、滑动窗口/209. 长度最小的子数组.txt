# 题目

给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。

示例：

输入：s = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。


# 思路

双指针，start,end分别指向连续元素的开始和结束，当两个指针之间的元素和小于s，之后移动end直到大于s，然后记录当前长度，尝试循环向前移动start。

# 代码

class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        start = end = 0
        n = len(nums)
        res = n + 1
        total = 0

        while end < n:
            total += nums[end]
            while total >= s:
                res = min(res, end - start + 1)
                total -= nums[start]
                start += 1
            end += 1
        
        return res if res != n + 1 else 0


