# 题目

给定一个增序排列数组 nums ，你需要在 原地 删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

说明：

为什么返回数值是整数，但输出的答案是数组呢？

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下：

// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
 

示例 1：

输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。 你不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]
解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 你不需要考虑数组中超出新长度后面的元素。
 

提示：

0 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 按递增顺序排列


# 思路

声明两个指针，用来记录连续的子串（一头一尾），初始两个指针都指向0， 从1开始遍历列表，假如当前遍历的元素与尾指针节点相等，并且尾指针与头指针相同，那么可以将当前元素移动到尾指针的下一个位置，同时向后移动尾指针，当当前遍历的元素与尾指针节点不相等时，将当前元素移动到尾指针的下一个位置，尾指针向后移动一下，同时头指针与其对齐。


# 代码

class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 3:
            return len(nums)
        
        s, e = 0, 0
        for i in range(1, len(nums)):
            if nums[i] == nums[e]:
                if s == e:
                    nums[e+1] = nums[i]
                    e += 1
            else:
                nums[e+1] = nums[i]
                e = e + 1
                s = e
        
        return e + 1
        
        
        
