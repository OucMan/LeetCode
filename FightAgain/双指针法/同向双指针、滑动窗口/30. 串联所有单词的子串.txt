# 题目

给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

 

示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。
示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]


# 思路

暴力法解题，使用字典来维护单词词频


# 代码

class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        if not s or len(s) == 0 or not words or len(words) == 0:
            return []
        
        words_map, res = {}, []
        for w in words:
            if w in words_map:
                words_map[w] += 1
            else:
                words_map[w] = 1
        
        one_word_size = len(words[0])
        all_word_size = len(words[0]) * len(words)

        for i in range(len(s)-all_word_size+1):
            tmp_str, tmp_tab = s[i:i+all_word_size], dict(words_map)
            for j in range(0, len(tmp_str), one_word_size):
                key = tmp_str[j:j+one_word_size]
                if key in tmp_tab:
                    tmp_tab[key] -= 1
                    if tmp_tab[key] == 0:
                        del tmp_tab[key]
                else:
                    break
            if not tmp_tab:
                res.append(i)
        return res
            

