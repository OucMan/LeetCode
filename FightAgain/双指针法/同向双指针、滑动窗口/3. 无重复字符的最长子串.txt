# 题目

给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
示例 4:

输入: s = ""
输出: 0
 

提示：

0 <= s.length <= 5 * 104
s 由英文字母、数字、符号和空格组成


# 思路

双指针，start和end分别指向当前不存在重复字符的字符串的首尾，向后移动end，查看前面s[start, end]子串中是否出现了end对应的元素，没有出现的话，更新长度，出现的话，将start移动到重复元素的后一个位置。


# 代码

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or len(s) < 2:
            return len(s)

        n = len(s)
        start = end = 0
        res = 0

        while end < n:
            if s[end] not in s[start:end]:
                res = max(res, end - start + 1)
            else:
                start += s[start:end].index(s[end]) + 1
            end += 1
        return res
        
        
