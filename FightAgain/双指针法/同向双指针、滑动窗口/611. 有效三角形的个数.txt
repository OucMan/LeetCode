# 题目

给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。

示例 1:

输入: [2,2,3,4]
输出: 3
解释:
有效的组合是: 
2,3,4 (使用第一个 2)
2,3,4 (使用第二个 2)
2,2,3
注意:

数组长度不超过1000。
数组里整数的范围为 [0, 1000]。


# 思路

两个最小边之和大于第三边，那么三边可组成三角形。

首先排序，倒序，遍历列表，然后使用头尾指针计算可形成的三角形个数

# 代码

class Solution(object):
    def triangleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) < 3:
            return 0
        
        nums.sort(reverse=True)
        n = len(nums)
        res = 0
        for i in range(n):
            l, r = i+1, n-1
            while l < r:
                if nums[i] >= nums[r] + nums[l]:
                    r -= 1
                else:
                    res += (r - l)
                    l += 1
        return res


