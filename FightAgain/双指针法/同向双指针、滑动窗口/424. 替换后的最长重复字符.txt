# 题目

给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。

注意:
字符串长度 和 k 不会超过 104。

示例 1:

输入:
s = "ABAB", k = 2

输出:
4

解释:
用两个'A'替换为两个'B',反之亦然。
示例 2:

输入:
s = "AABABBA", k = 1

输出:
4

解释:
将中间的一个'A'替换为'B',字符串变为 "AABBBBA"。
子串 "BBBB" 有最长重复字母, 答案为 4。


# 思路

滑动窗口，窗口从左至右不断扩张/滑动，当窗口触达字符串末尾字符时，运算结束，窗口的宽度为最终结果。初始窗口的宽度为1，我们不断的通过向当前窗口覆盖的子串后面追加一个字符看是否能满足我们的要求，如果满足窗口扩张，如果不满足，窗口向右滑动。

当K>0时，子串的条件变成了允许我们变换子串中的K个字符使其变成一个连续子串

那么这个题的关键点就是我们如何判断一个字符串改变K个字符，能够变成一个连续串

如果当前字符串中的出现次数最多的字母个数+K大于串长度，那么这个串就是满足条件的




# 代码

class Solution(object):
    def characterReplacement(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: int
        """
        t = {}
        res = left = 0
        for right, value in enumerate(s):
            t[value] = t.get(value, 0) + 1
            if right - left + 1 - max(t.values()) > k:
                t[s[left]] -= 1
                left += 1
            res = max(res, right - left + 1)
        return res
            
        
        
