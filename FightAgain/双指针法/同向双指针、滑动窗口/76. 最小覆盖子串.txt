# 题目

给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。

注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。


示例 1：

输入：s = "ADOBECODEBANC", t = "ABC"
输出："BANC"
示例 2：

输入：s = "a", t = "a"
输出："a"
 

提示：

1 <= s.length, t.length <= 105
s 和 t 由英文字母组成
 

进阶：你能设计一个在 o(n) 时间内解决此问题的算法吗？


# 思路

定义滑动窗口的左右边界left, right，定义一个字典来保存所需字符情况，定义一个变量来保存需要字符个数。字典的初始化就是遍历t得到，然后循环右移right指针遍历s，如果元素存在字典中，并且值大于0，则所需字符个数减一，字典值减一，当不存在字典中的元素出现时也减一，因此字典中值小于0的元素是多于元素。当所需字符个数等于0时，说明现在窗口内刚好满足t，因此循环右移left直到碰到不能剔除窗口的元素，找到满足条件的最小窗口。然后进一步右移一下left，这时窗口肯定不能满足条件，下面重复上述条件寻找下一个符合条件的窗口。。。


# 代码

from collections import defaultdict

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        need = defaultdict(int)
        for i in t:
            need[i] += 1
        left = 0
        need_cnt = len(t)
        res = (0, float('inf'))
        for right, value in enumerate(s):
            if need[value] > 0:
                need_cnt -= 1
            need[value] -= 1
            if need_cnt == 0:
                while True:
                    c = s[left]
                    if need[c] == 0:
                        break
                    need[c] += 1
                    left += 1
                if right - left < res[1] - res[0]:
                    res = [left, right]
                need[s[left]] += 1
                need_cnt += 1
                left += 1
        return '' if res[1] > len(s) else s[res[0]: res[1] + 1]

        

                

