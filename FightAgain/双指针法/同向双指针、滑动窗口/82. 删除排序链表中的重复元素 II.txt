# 题目

给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。

示例 1:

输入: 1->2->3->3->4->4->5
输出: 1->2->5
示例 2:

输入: 1->1->1->2->3
输出: 2->3


# 思路

可能头指针被删除，所以需要创建一个新的伪首部，，然后什么两个指针，一个指向当前节点，一个指向肯定在结果中的上一下节点，然后遍历链表，如果当前节点与下一个节点元素相等，那么循环，找到这一条完整的相等的链，只到发现第一个不与当前链相等的节点，上一个节点的next指针指向它，因为该节点可能会是真正的下一个节点，此时不将上一个节点指针移动到该节点，因为该节点也可能与后面的节点相等。只到碰到当前节点与下一个节点不相等的时候，才确定只有这一个节点是这一个数，这是才将上一个节点移动过来。


# 代码

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        
        pre = new_head = ListNode(-1)
        new_head.next = head
        cur = head

        while cur and cur.next:
            if cur.val == cur.next.val:
                v = cur.val
                while cur and cur.val == v:
                    cur = cur.next
                pre.next = cur
            else:
                pre = pre.next
                cur = cur.next
        
        return new_head.next


