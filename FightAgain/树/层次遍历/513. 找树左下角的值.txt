# 题目

给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 
# 思路

层序遍历，找到最后一行，输出最左边的值

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        cur_layer = []
        next_layer = []
        queue = [root]

        while queue:
            node = queue.pop(0)
            cur_layer.append(node.val)
            if node.left:
                next_layer.append(node.left)
            if node.right:
                next_layer.append(node.right)
            if not queue:
                if not next_layer:
                    return cur_layer[0]
                else:
                    queue = next_layer
                    next_layer = []
                    cur_layer = []
        
        
