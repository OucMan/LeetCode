# 题目

给定一个二叉树，根节点为第1层，深度为 1。在其第 d 层追加一行值为 v 的节点。

添加规则：给定一个深度值 d （正整数），针对深度为 d-1 层的每一非空节点 N，为 N 创建两个值为 v 的左子树和右子树。

将 N 原先的左子树，连接为新节点 v 的左子树；将 N 原先的右子树，连接为新节点 v 的右子树。

如果 d 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 v，原先的整棵树将作为 v 的左子树。

示例 1:

输入: 
二叉树如下所示:
       4
     /   \
    2     6
   / \   / 
  3   1 5   

v = 1

d = 2

输出: 
       4
      / \
     1   1
    /     \
   2       6
  / \     / 
 3   1   5   

示例 2:

输入: 
二叉树如下所示:
      4
     /   
    2    
   / \   
  3   1    

v = 1

d = 3

输出: 
      4
     /   
    2
   / \    
  1   1
 /     \  
3       1
注意:

输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。
输入的二叉树至少有一个节点。


# 思路

首先处理d=1的情况

当d>1时，首先进行层序遍历得到第d-1行的所有节点，然后对每一个节点新创建左右节点，并将原始的左子树赋值为新建左节点的左子树，原始的右子树赋值为新建右节点的右子树。

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def addOneRow(self, root, v, d):
        """
        :type root: TreeNode
        :type v: int
        :type d: int
        :rtype: TreeNode
        """

        if d == 1:
            node = TreeNode(v)
            node.left = root
            return node
        
        
        queue = [root]
        next_layer = []
        cur_layer = [] # find the nodes of (d-1)th row
        i = 1

        while queue:
            node = queue.pop(0)
            cur_layer.append(node)
            if node.left:
                next_layer.append(node.left)
            if node.right:
                next_layer.append(node.right)
            if not queue:
                if i == d - 1:
                    break
                queue = next_layer
                next_layer = []
                cur_layer = []
                i += 1
        
        for n in cur_layer:
            l = TreeNode(v)
            r = TreeNode(v)
            l.left = n.left
            r.right = n.right
            n.left = l
            n.right = r
            
        return root


