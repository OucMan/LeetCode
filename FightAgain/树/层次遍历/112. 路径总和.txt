# 题目


# 思路

思路1

层序遍历，队里中保存的元素为(节点，根到该节点的路径上所有元素的和)

思路2

深度搜索dfs

# 代码

思路1

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if not root:
            return False
        
        queue = [(root, root.val)]

        while queue:
            node = queue.pop(0)
            if not node[0].left and not node[0].right:
                if node[1] == sum:
                    return True
            if node[0].left:
                queue.append((node[0].left, node[1] + node[0].left.val))
            if node[0].right:
                queue.append((node[0].right, node[1] + node[0].right.val))
                
        return False
        
      思路2
      
      # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if not root:
            return False
        return self.helper(root, sum)
    
    def helper(self, root, sum):
        if not root:
            return False
        if root.val == sum and not root.left and not root.right:
            return True
        return self.helper(root.left, sum-root.val) or self.helper(root.right, sum-root.val)
        
        
     
