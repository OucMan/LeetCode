# 题目

给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL。


# 思路

层序遍历，同时更新节点的next指针， 因此需要定义一个变量保存前一个节点，当换层时，将节点的next 指针设置为None


# 代码

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=0, left=None, right=None, next=None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
        if not root:
            return None
        
        queue = [root]
        next_layer = []
        cur_node = None

        while queue:
            node = queue.pop(0)
            if cur_node:
                cur_node.next = node
            cur_node = node

            if node.left:
                next_layer.append(node.left)
            if node.right:
                next_layer.append(node.right)

            if not queue:
                queue = next_layer
                next_layer = []
                cur_node = None
                node.next = None
        return root
