# 题目

给定一个二叉树，返回所有从根节点到叶子节点的路径。

说明: 叶子节点是指没有子节点的节点。

示例:

输入:

   1
 /   \
2     3
 \
  5

输出: ["1->2->5", "1->3"]

解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3

# 思路

深度遍历（递归）

层次遍历（队列），入队的元素为(节点，根到节点的路径)


# 代码

思路1 

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):

    def __init__(self):
        self.res = []

    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        if not root:
            return []
        path = str(root.val)
        self.helper(root, path)
        return self.res

    def helper(self, root, path):
        if root.left:
            self.helper(root.left, path + '->' + str(root.left.val))
        if root.right:
            self.helper(root.right, path + '->' + str(root.right.val))
        if not root.left and not root.right:
            self.res.append(path)
            return
            
思路2

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):

    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        if not root:
            return []
        res = []
        queue = [(root, str(root.val))]

        while queue:
            node = queue.pop(0)
            if not node[0].left and not node[0].right:
                res.append(node[1])
            if node[0].left:
                queue.append((node[0].left, node[1] + '->' + str(node[0].left.val)))
            if node[0].right:
                queue.append((node[0].right, node[1] + '->' + str(node[0].right.val)))
        
        return res

        
