# 题目

序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。

设计一个算法来序列化和反序列化 二叉搜索树 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。

编码的字符串应尽可能紧凑。

 

示例 1：

输入：root = [2,1,3]
输出：[2,1,3]
示例 2：

输入：root = []
输出：[]
 

提示：

树中节点数范围是 [0, 104]
0 <= Node.val <= 104
题目数据 保证 输入的树是一棵二叉搜索树。
 

注意：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。


# 思路

二叉搜索树，我们使用前序遍历，这样，遍历后得到列表，列表的第一个元素是根节点，后面的小于第一个元素的节点是左子树节点，其余的为右子树节点，使用递归来重构二叉搜索树。

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def pre_order(root):
            if not root:
                return []
            left = pre_order(root.left)
            right = pre_order(root.right)
            return [str(root.val)] + left + right
        res = pre_order(root)
        return ' '.join(res)

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == '':
            return None
        nodes = data.split()
        nodes = [int(x) for x in nodes]

        def helper(nodes):
            if not nodes:
                return None
            root = TreeNode(nodes[0])
            left = [x for x in nodes[1:] if x < nodes[0]]
            right =  [x for x in nodes[1:] if x > nodes[0]]
            root.left = helper(left)
            root.right = helper(right)
            return root
        
        return helper(nodes)
    
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# tree = ser.serialize(root)
# ans = deser.deserialize(tree)
# return ans

