# 题目

给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。

假定 BST 有如下定义：

结点左子树中所含结点的值小于等于当前结点的值
结点右子树中所含结点的值大于等于当前结点的值
左子树和右子树都是二叉搜索树
例如：
给定 BST [1,null,2,2],

   1
    \
     2
    /
   2
返回[2].

提示：如果众数超过1个，不需考虑输出顺序

进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）


# 思路

思路1，中序遍历，保存到字典中，得到众数，但是不符合进阶中空间复杂度为O(1)的要求

思路2，使用二叉搜索树的特性，即中序遍历得到该树的有顺序的序列，因此在遍历的过程中可以记录众数出现的次数，以及众数，因此只需要设置一些标记变量，以及中序遍历两次（一次得到众数出现的次数和众数的数量，一次获得所有众数），便可以得到结果

# 代码

思路1

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import Counter

class Solution(object):
    def findMode(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        c = Counter()
        stack = []
        node = root
        while stack or node:
            if node:
                stack.append(node)
                node = node.left
            else:
                tmp = stack.pop()
                c[tmp.val] += 1
                node = tmp.right
        v = c.most_common()[0][1]
        return [x for x in c if c[x] == v]


思路2

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):

    def __init__(self):
        self.res = []
        self.pre = None
        self.res_count, self.max_count, self.cur_count = 0, 0, 0

    def findMode(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        self.inorder(root)
        self.res = [0] * self.res_count
        self.res_count, self.cur_count = 0, 0
        self.inorder(root)
        return self.res
    
    def inorder(self, root):
        if not root:
            return None
        self.inorder(root.left)
        if self.pre and self.pre.val == root.val:
            self.cur_count += 1
        else:
            self.cur_count = 1
        self.pre = root
        if self.cur_count > self.max_count:
            self.max_count = self.cur_count
            self.res_count = 1
        elif self.cur_count == self.max_count:
            if len(self.res):
                self.res[self.res_count-1] = root.val
            self.res_count += 1 
        self.inorder(root.right)
        
