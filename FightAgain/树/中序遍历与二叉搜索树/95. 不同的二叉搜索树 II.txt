# 题目

给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。

示例：

输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
 

提示：

0 <= n <= 8

# 思路

递归，在所有的元素中，一次选择根节点，然后利用二叉搜索树的特点，分别生成左子树和右子树集合，分别赋值


# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        if n == 0:
            return []
        return self.helper(1, n)
    
    def helper(self, low, high):
        res = []
        if high < low:
            return [None]
        for i in range(low, high+1):
            for left in self.helper(low, i-1):
                for right in self.helper(i+1, high):
                    root = TreeNode(i)
                    root.left = left
                    root.right = right
                    res.append(root)
        return res

