# 题目

给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

# 思路

递归：根节点的取值为（负无穷，正无穷），左子树根节点的取值为（负无穷， 根节点）， 右子树根节点的取值为（跟节点，正无穷）

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        return self.helper(root, float('-inf'), float('inf'))
    
    def helper(self, root, min_value, max_value):
        if not root:
            return True
        if not (min_value < root.val < max_value):
            return False
        return self.helper(root.left, min_value, root.val) and self.helper(root.right, root.val, max_value)
