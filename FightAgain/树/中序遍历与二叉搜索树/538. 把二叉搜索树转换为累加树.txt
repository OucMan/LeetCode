# 题目

给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。

提醒一下，二叉搜索树满足下列约束条件：

节点的左子树仅包含键 小于 节点键的节点。
节点的右子树仅包含键 大于 节点键的节点。
左右子树也必须是二叉搜索树。


# 思路

递归：首先声明一个全局变量来保存树中节点的累积和，根据题意，右节点的值还是原值，根的值等于原值加上右边节点的累积和，左节点的值等于原值加上根节点的值+右边节点的值，因此我们首先变量右子树，然后更新根节点的值和累计值，最后更新左子树


# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def __init__(self):
        self.v = 0

    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        if not root:
            return None
        self.helper(root)
        return root
    
    def helper(self, root):
        if not root:
            return 0
        self.helper(root.right)
        root.val += self.v
        self.v = root.val
        self.helper(root.left)
        
        
