# 题目

实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

调用 next() 将返回二叉搜索树中的下一个最小的数。

next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。
你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。


# 思路

初始化的时候，对二叉搜索树进行中序遍历，将结果保存到栈中

需要改进，时间复杂度可以满足要求，但是空间复杂度为O(n)

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import deque

class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.nums = deque()

        def helper(root):
            if not root:
                return None
            helper(root.left)
            self.nums.append(root.val)
            helper(root.right)
        
        helper(root)


    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        return self.nums.popleft()


    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        return True if self.nums else False



# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
