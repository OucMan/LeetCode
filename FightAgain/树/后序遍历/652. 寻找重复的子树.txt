# 题目

给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。

两棵树重复是指它们具有相同的结构以及相同的结点值。

示例 1：

        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4
下面是两个重复的子树：

      2
     /
    4
和

    4
因此，你需要以列表的形式返回上述重复子树的根结点。

# 思路

使用后序遍历，将每一个子树的后序序列保存到字典中


# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

from collections import Counter

class Solution(object):
    def findDuplicateSubtrees(self, root):
        """
        :type root: TreeNode
        :rtype: List[TreeNode]
        """
        c = Counter()
        res = []

        def helper(root):
            if not root:
                return '#'
            left = helper(root.left)
            right = helper(root.right)
            chain = left + ',' + right + ',' + str(root.val)
            c[chain] += 1
            if c[chain] == 2:
                res.append(root)
            return chain

        helper(root) 
        return res
