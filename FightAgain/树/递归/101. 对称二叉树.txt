# 题目

给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3


# 思路

递归，首先判断root是否为空，假如为空，直接返回True，非空的话，则进一步判断左子树和右子树的关系

# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        else:
            return self.helper(root.left, root.right)
    
    def helper(self, left, right):
        if not left and not right:
            return True
        elif left and right:
            if left.val != right.val:
                return False
            else:
                return self.helper(left.left, right.right) and self.helper(left.right, right.left)
        else:
            return False
            
