# 题目

给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11


# 思路

最终的结果可以分成三个部分，一个是root节点为起点，一个是左子树根节点为起点，一个是右子树根节点为起点；

然后以某一点为路过点的函数，递归过程如下：

首先判断节点是否为空，如果为空，返回0

节点的值是否为剩余值，如果是，则找到了一个符合条件的路径

继续向下判定节点


# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        if not root:
            return 0
        return self.helper(root, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)
    
    def helper(self, root, sum):
        if not root:
            return 0
        res = 0
        if root.val == sum:
            res = 1
        return res + self.helper(root.left, sum-root.val) + self.helper(root.right, sum-root.val)
