# 题目

给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。

你找到的子数组应是最短的，请输出它的长度。

示例 1:

输入: [2, 6, 4, 8, 10, 9, 15]
输出: 5
解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
说明 :

输入的数组长度范围在 [1, 10,000]。
输入的数组可能包含重复元素 ，所以升序的意思是<=。

# 思路

思路1

排序后比较

思路2

我们可以假设把这个数组分成三段，左段和右段是标准的升序数组，中段数组虽是无序的，但满足最小值大于左段的最大值，最大值小于右段的最小值。


那么我们目标就很明确了，找中段的左右边界，我们分别定义为begin 和 end;
分两头开始遍历:

从左到右维护一个最大值max,在进入右段之前，那么遍历到的nums[i]都是小于max的，我们要求的end就是遍历中最后一个小于max元素的位置；
同理，从右到左维护一个最小值min，在进入左段之前，那么遍历到的nums[i]也都是大于min的，要求的begin也就是最后一个大于min元素的位置。

详情见https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/si-lu-qing-xi-ming-liao-kan-bu-dong-bu-cun-zai-de-/


# 代码

思路1

class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        tmp = [x for x in nums]
        nums.sort()
        if nums == tmp:
            return 0
        left, right = 0, len(nums)-1
        while left <= len(nums)-1:
            if nums[left] != tmp[left]:
                break
            left += 1
        while right >= 0:
            if nums[right] != tmp[right]:
                break
            right -= 1
        
        return right - left + 1

思路2

class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        beign, end = 0, -1
        min_val, max_val = nums[-1], nums[0]
        n = len(nums)

        for i in range(n):
            if nums[i] >= max_val:
                max_val = nums[i]
            else:
                end = i

        for i in range(n-1, -1, -1):
            if nums[i] <= min_val:
                min_val = nums[i]
            else:
                beign = i
        
        return end - beign + 1
        

注意：end的初始化为-1，是为了处理原序列已经是升序。


