# 题目

给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

 

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。




# 思路

动态规划

这里要考虑正负的问题

f(i)为以第i个元素结尾的子数组的最大乘积

f(i) = max(f(i-1) * nums[i], g(i-1) * nums[i], nums[i])

以第i个元素结尾的子数组的最大乘积，可能是第i个元素自身，以第i-1个元素结尾的子数组的最大乘积再乘以第i个元素，或者是第i-1个元素结尾的子数组的最小乘积再乘以第i个元素。

g(i)为以第i个元素结尾的子数组的最小乘积

g(i) = min(f(i-1) * nums[i], g(i-1) * nums[i], nums[i])

以第i个元素结尾的子数组的最小乘积，可能是第i个元素自身，以第i-1个元素结尾的子数组的最大乘积再乘以第i个元素，或者是第i-1个元素结尾的子数组的最小乘积再乘以第i个元素。



# 代码

class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp_max, dp_min = nums[0], nums[0]
        res = nums[0]

        for n in nums[1:]:
            # 同时更新
            dp_max, dp_min = max(dp_max * n, dp_min * n, n), min(dp_max * n, dp_min * n, n)
            res = max(dp_max, res)
        return res
        
        
        
