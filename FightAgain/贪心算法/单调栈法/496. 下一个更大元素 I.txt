# 题目

给定两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。

nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。

示例 1:

输入: nums1 = [4,1,2], nums2 = [1,3,4,2].
输出: [-1,3,-1]
解释:
    对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。
    对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。
    对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。
示例 2:

输入: nums1 = [2,4], nums2 = [1,2,3,4].
输出: [3,-1]
解释:
    对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。
    对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出 -1 。
 
提示：

nums1和nums2中所有元素是唯一的。
nums1和nums2 的数组大小都不超过1000。


# 思路

借助字典保存每一个元素，以及其后面最近的一个比较它大的数。

声明一个栈结构，倒叙遍历列表，循环剔除栈顶小于当前遍历元素的元素，假如栈顶还有元素，则当前元素后面的下一个最近的大数即为栈顶元素，栈为空，则为-1，每一次将当前元素入栈



# 代码

class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        d = {}
        for n in nums2:
            d[n] = -1
        
        stack = []
        for i in range(len(nums2)-1, -1, -1):
            while stack and stack[-1] <= nums2[i]:
                stack.pop()
            if stack:
                d[nums2[i]] = stack[-1]
            stack.append(nums2[i])
            
        res = [d[x] for x in nums1]
        return res


