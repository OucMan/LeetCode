# 题目


给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。

示例 1:

输入: [1,2,1]
输出: [2,-1,2]
解释: 第一个 1 的下一个更大的数是 2；
数字 2 找不到下一个更大的数； 
第二个 1 的下一个最大的数需要循环搜索，结果也是 2。


# 思路

碰到循环列表的结题思路就是将原列表d扩充为d+d，借助栈，倒序遍历列表，当当前元素小于栈顶元素，直接入栈，否则循环剔除栈顶元素，直到栈为空或者栈顶元素大于当前元素，为空说明后面没有元素比当前元素大，不为空，则栈顶元素为当前元素最近的下一个大数，计算完再将当前元素入栈。


# 代码

class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        l = len(nums)
        nums = nums + nums
        res = []
        stack = []
        for n in nums[::-1]:
            while stack and stack[-1] <= n:
                stack.pop()
            if stack:
                res.insert(0, stack[-1])
            else:
                res.insert(0, -1)
            stack.append(n)
        return res[:l]
        



