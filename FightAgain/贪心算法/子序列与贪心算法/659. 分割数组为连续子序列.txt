# 题目

给你一个按升序排序的整数数组 num（可能包含重复数字），请你将它们分割成一个或多个长度至少为 3 的子序列，其中每个子序列都由连续整数组成。

如果可以完成上述分割，则返回 true ；否则，返回 false 。

 

示例 1：

输入: [1,2,3,3,4,5]
输出: True
解释:
你可以分割出这样两个连续子序列 : 
1, 2, 3
3, 4, 5
示例 2：

输入: [1,2,3,3,4,4,5,5]
输出: True
解释:
你可以分割出这样两个连续子序列 : 
1, 2, 3, 4, 5
3, 4, 5
示例 3：

输入: [1,2,3,4,4,5]
输出: False
 

提示：

1 <= nums.length <= 10000


# 思路

记录每一个数以及出现的次数，即c[num]=count, 如果 c[num]<=c[num+1]，那么子序列就会包括num+1，否则该子序列会在num处停止，检测每一个子序列的长度

# 代码

from collections import Counter

class Solution(object):
    def isPossible(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums) < 3 or len(set(nums)) < 3:
            return False
        
        c = Counter(nums)
        while c:
            start, l = min(c.keys()), 0
            while start in c:
                c[start] -= 1
                l += 1
                if c[start+1] <= c[start]:
                    break
                start += 1
            if l < 3:
                return False
            c += Counter()
        return True

# 注意，c += Counter()用于将字典中的值小于等0的元素去掉

