# 题目

376. 摆动序列
如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。

例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

示例 1:

输入: [1,7,4,9,2,5]
输出: 6 
解释: 整个序列均为摆动序列。
示例 2:

输入: [1,17,5,10,13,15,10,5,16,8]
输出: 7
解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。
示例 3:

输入: [1,2,3,4,5,6,7,8,9]
输出: 2
进阶:
你能否用 O(n) 时间复杂度完成此题?

# 思路

思路1：贪心

如果按照贪心的思路，我们必然希望小的数非常小(以便后续加入大的数)，也希望大的数非常大(以便后续加入小的数)，编码思路如下：

将nums中所有元素逐项作差；
初始化结果数组；
当差为0时，直接跳过，因为这不符合摆动性质，如果序列成摆动性质，直接扩展结果数组即可，否则res[-1]要保持局部最小或最大状态方便后续摆动。

思路2

声明两个变量up和down，初始化为1，从第二个元素开始遍历，当前元素小于前一个元素时，证明当前是向下的走向，使得down = up + 1，这样就算连续多个元素向下趋势，那么down也只加1次，同理，当前元素大于前一个元素时，证明当前是向上的走向，使得up = down + 1，这样就算连续多个元素向上趋势，那么up也只加1次,最后取up和down的最大值。


# 代码

思路1

class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return len(nums)
        
        n = len(nums)
        cha = []
        for i in range(1, n):
            cha.append(nums[i] - nums[i-1])
        res = []
        for i in cha:
            if i != 0:
                if not res:
                    res.append(i)
                else:
                    if res[-1] < 0:
                        if i < 0:
                            res[-1] = i
                        else:
                            res.append(i)
                    elif res[-1] > 0:
                        if i > 0:
                            res[-1] = i
                        else:
                            res.append(i)
        return len(res) + 1

思路2


class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return len(nums)
        
        up, down = 1, 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                up = down + 1
            elif nums[i] < nums[i-1]:
                down = up + 1
        
        return max(up, down)


