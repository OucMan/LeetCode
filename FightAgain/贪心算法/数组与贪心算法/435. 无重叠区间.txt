# 题目

给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

注意:

可以认为区间的终点总是大于它的起点。
区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
示例 1:

输入: [ [1,2], [2,3], [3,4], [1,3] ]

输出: 1

解释: 移除 [1,3] 后，剩下的区间没有重叠。
示例 2:

输入: [ [1,2], [1,2], [1,2] ]

输出: 2

解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
示例 3:

输入: [ [1,2], [2,3] ]

输出: 0

解释: 你不需要移除任何区间，因为它们已经是无重叠的了。


# 思路

求出区间列表中，最大的不相交区间个数，然后让列表长度减去该数即可得到删除的区间数。

求最大的不相交区间个数，首先将区间按照终点排序，根据前后区间的起始点和终点得到不相交区间


# 代码

class Solution(object):
    def eraseOverlapIntervals(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: int
        """
        if not intervals or len(intervals) < 2:
            return 0
        
        intervals.sort(key = lambda x: x[1])

        count = 1
        end = intervals[0][1]

        for item in intervals[1:]:
            if end <= item[0]:
                count += 1
                end = item[1]
        
        return len(intervals) -  count
        
        
        
