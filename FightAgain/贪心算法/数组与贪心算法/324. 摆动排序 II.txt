# 题目

给定一个无序的数组 nums，将它重新排列成 nums[0] < nums[1] > nums[2] < nums[3]... 的顺序。

示例 1:

输入: nums = [1, 5, 1, 1, 6, 4]
输出: 一个可能的答案是 [1, 4, 1, 5, 1, 6]
示例 2:

输入: nums = [1, 3, 2, 2, 3, 1]
输出: 一个可能的答案是 [2, 3, 1, 3, 1, 2]
说明:
你可以假设所有输入都会得到有效的结果。

进阶:
你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？

# 思路

先排序，再对折，再倒叙，再插入

# 代码

class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        nums.sort()
        m = (len(nums) + 1) // 2
        a1 = nums[:m][::-1]
        a2 = nums[m:][::-1]
        del nums[:]
        for i in range(m):
            nums.append(a1[i])
            if i < len(a2):
                nums.append(a2[i])

# 注意

list的清空

本题不可使用nums = []，这相当于重新创建了一个对象，与原list不是一个对象。
