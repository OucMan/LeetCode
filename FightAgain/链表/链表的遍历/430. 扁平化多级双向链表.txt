# 题目

多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。

给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。

 

示例 1：

输入：head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
输出：[1,2,3,7,8,11,12,9,10,4,5,6]




# 思路

将本题中的数据结构可以看成是二叉树结构，

将child看成左子树，next看成右子树，使用先序遍历得到的结果就是本题的结果


# 代码

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return None
        new_head = Node(None, None, None, None)
        self.pre_node = new_head
        def hepler(curNode):
            if not curNode:
                return None
            left = curNode.child
            right = curNode.next
            curNode.child = None
            self.pre_node.next = curNode
            curNode.prev = self.pre_node
            self.pre_node = curNode
            hepler(left)
            hepler(right)
        hepler(head)
        res = new_head.next
        res.prev = None
        return res
        
        
