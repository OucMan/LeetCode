# 题目

给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807



# 思路

遍历两个链表即可，注意进位问题


# 代码

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        
        jinwei = 0
        head = cur = ListNode(-1)
        while l1 and l2:
            node = ListNode((l1.val + l2.val + jinwei) % 10)
            jinwei = (l1.val + l2.val + jinwei) // 10
            cur.next = node
            cur = cur.next
            l1 = l1.next
            l2 = l2.next
        while l1:
            node = ListNode((l1.val + jinwei) % 10)
            jinwei = (l1.val + jinwei) // 10
            cur.next = node
            cur = cur.next
            l1 = l1.next
        while l2:
            node = ListNode((l2.val + jinwei) % 10)
            jinwei = (l2.val + jinwei) // 10
            cur.next = node
            cur = cur.next
            l2 = l2.next
        if jinwei > 0:
            node = ListNode(jinwei)
            cur.next = node
            cur = cur.next
        cur.next = None

        return head.next
        
        
