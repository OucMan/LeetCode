# 题目

给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

 

示例：

给你这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

 

说明：

你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。


# 思路

head为空，或者head.next为空，或者k==1，或者链表长度小于k时直接返回head

否则

递归

首先反转前k个元素，最后一个元素的next等于，递归处理后面的节点的返回值（首部）


# 代码

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or not head.next or k == 1:
            return head
        l = 0
        cur = head
        while cur:
            cur = cur.next
            l += 1
        if l < k:
            return head
        
        new_head = ListNode(-1)
        new_head.next = head
        next_node = head.next
        i = 1
        while i < k:
            node = next_node.next
            next_node.next = head
            head = next_node
            next_node = node
            i += 1
        new_head.next.next = self.reverseKGroup(next_node, k)
        return head



