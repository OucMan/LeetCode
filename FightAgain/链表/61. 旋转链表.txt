# 题目

给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL


# 思路

首先遍历链表得到链表的长度l，并且将尾部元素的next指向头部元素，形成循环列表。然后k%l得到实际向右移动的距离，向右移动k，相当于向左移动l-k，而向左移动只要按照链表的方向移动head指针即可。


# 代码

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        
        cur = head
        l = 1
        while cur.next:
            cur = cur.next
            l += 1
        pre = cur  # 尾部元素
        pre.next = head
        k = l - k % l # 左移的距离
        while k > 0:
            head = head.next
            pre = pre.next
            k -= 1
        pre.next = None #尾部元素的next指向None
        return head
        
        
