# 题目

给定两个数组，编写一个函数来计算它们的交集。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
 

说明：

输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。
我们可以不考虑输出结果的顺序。
进阶：

如果给定的数组已经排好序呢？你将如何优化你的算法？
如果 nums1 的大小比 nums2 小很多，哪种方法更优？
如果 nums2 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？


# 思路

借助字典保存某一列表中元素以及其出现的次数，再次遍历另一个列表，如果元素存在字典中，并且对应的数量大于0，则将该元素放到结果中，接着字典中该元素的计数器减一

# 代码

class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        tabel = {}
        for n in nums1:
            tabel[n] = tabel.get(n, 0) + 1
        
        res = []

        for n in nums2:
            if n in tabel and tabel[n] > 0:
                res.append(n)
                tabel[n] -= 1
        return res
        
        
        
