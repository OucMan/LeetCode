 # 题目
 
 给定一个整数 n ，你需要找到与它最近的回文数（不包括自身）。

“最近的”定义为两个整数差的绝对值最小。

示例 1:

输入: "123"
输出: "121"
注意:

n 是由字符串表示的正整数，其长度不超过18。
如果有多个结果，返回最小的那个。

 
 
 # 思路
 
 当n <= 10的时候，返回值为n-1，一位数即可
 当n = 100000...的时候，返回9999...
 当n = 11时，返回9
 
 其他情况
 
 将字符串对半折开，如果长度为奇数，则左侧长一些，然后构造可能的回文串。对于可能的回文串，中间的元素可能减1，不变或者加1，我们将左边的这些子串反转并添加在左边子串后，接着判断与原数的差绝对值最小的那一个。
 
 
 
 # 代码
 
 class Solution(object):
    def nearestPalindromic(self, n):
        """
        :type n: str
        :rtype: str
        """
        if int(n) <= 10 or int(n[::-1]) == 1:
            return str(int(n)-1)
        
        if n == '11':
            return '9'
        
        if set(n) == {'9'}:
            return str(int(n)+2)
        
        a, b = n[: (len(n) + 1) // 2], n[(len(n) + 1) // 2 : ]
        tmp = [str(int(a)-1), a, str(int(a)+1)]
        tmp = [x + x[len(b)-1::-1] for x in tmp]
        return min(tmp, key=lambda x: abs(int(x)-int(n)) or float('inf'))


        
 
