# 题目

给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。

 

示例 1:

输入: [0,1]
输出: 2
说明: [0, 1] 是具有相同数量0和1的最长连续子数组。
示例 2:

输入: [0,1,0]
输出: 2
说明: [0, 1] (或 [1, 0]) 是具有相同数量0和1的最长连续子数组。
 

注意: 给定的二进制数组的长度不会超过50000。



# 思路

设置一个变量计算当前的累积和，cur_sum，当前元素为0时，cur_sum减1，当前元素为1时，cur_sum加1。同时借助字典保存cur_sum以及其最早出现的位置。

如果当前位置i的前缀和为cur_sum，并且字典中也包含cur_sum，说明之前也存在某一位置j其前缀和为cur_sum，那说明从j+1到i这一连续串的累积和为0，即0和1的数量一样多（0表示减1,1表示加1）



# 代码

class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) < 2:
            return 0
        
        cur_sum = 0
        tables = {0: -1}
        res = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                cur_sum -= 1
            else:
                cur_sum += 1
            if cur_sum in tables:
                res = max(res, i - tables[cur_sum])
            else:
                tables[cur_sum] = i
        
        return res
