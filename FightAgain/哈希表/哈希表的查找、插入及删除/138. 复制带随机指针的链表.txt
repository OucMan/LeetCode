# 题目

给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。

要求返回这个链表的 深拷贝。 

我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：

val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。


# 思路

分为三步

首先复制节点，复制的节点插入到原节点的后面

其次，设置random指针

最后拆开链表


# 代码

"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if not head:
            return None
        
        cur = head
        while cur:
            next_node = cur.next
            node =Node(cur.val)
            node.next = cur.next
            cur.next = node
            cur = next_node
        
        cur = head
        while cur:
            if cur.random:
                cur.next.random = cur.random.next
            cur = cur.next.next
        
        pre = head
        new_head = cur = head.next

        while cur and cur.next:
            pre.next = pre.next.next
            pre = pre.next
            cur.next = cur.next.next
            cur = cur.next
        
        pre.next = None
        return new_head





        

