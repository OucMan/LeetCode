# 题目

给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。

 

进阶：你可以设计并实现时间复杂度为 O(n) 的解决方案吗？

 

示例 1：

输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。
示例 2：

输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9
 

提示：

0 <= nums.length <= 104
-109 <= nums[i] <= 109

# 思路

首先去重，将list转变为set

遍历set，对于元素n，首先判断n-1是否在set中，如果在说明n不是某一个连续序列的最小值，跳过即可，如果不在，说明n为某一连续序列的最小值，接着我们便循环加1，直到元素不在set中，这是记录序列的长度。

# 代码

class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = set(nums)
        res = 0
        for n in nums:
            if n-1 not in nums:
                m = n + 1
                while m in nums:
                    m += 1
                res = max(res, m-n)
        return res
        
        
