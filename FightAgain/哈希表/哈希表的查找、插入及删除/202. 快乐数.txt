# 题目

编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。

如果 n 是快乐数就返回 True ；不是，则返回 False 。

 

示例：

输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


# 思路

把 n 的各位的平方和 作为 新的 n，直到出现了已经见过的 n 或者 n == 1停止。

想要知道是否见过这个数字，就需要一个 set 来保存已经 visited 了的数字。 set 查找一个数字的时间复杂度是 O(1)。


# 代码

class Solution(object):
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        visited = set()
        while n != 1 and n not in visited:
            visited.add(n)
            nxt = 0
            while n:
                nxt += (n%10) ** 2
                n = n // 10
            n = nxt
        return n == 1
        
        
