# 题目

给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]
注意：

结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？


# 思路

首先得到列表中元素的异或和，这个异或和就是两个唯一元素的异或和。下来来拆分这两个元素。找到这个异或和二进制表示中的第一个不为0的位置，根据这一位来区分两个元素，因此列表中的元素就可以根据该位来分成两部分，对每一部分计算异或和，得到的两个结果就是两个唯一的异或和。


# 代码

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        tmp = 0
        for n in nums:
            tmp = tmp ^ n
        tmp = tmp & (-1 * tmp)
        r1, r2 = 0, 0
        for n in nums:
            if n & tmp == 0:
                r1 = r1 ^ n
            else:
                r2 = r2 ^ n
        return [r1, r2]
        
        
