# 题目

不使用运算符 + 和 - ，计算两整数a 、b之和。

示例 1:

输入: a = 1, b = 2
输出: 3
示例 2:

输入: a = -2, b = 3
输出: 1


# 思路

转成二进制，使用异或表示不带进位的和，使用与运算加左移得出出现进位的位置，两者上述运算，直到不存在进位位置。

注： 与 0xFFFFFFFF是为了控制数的边界为32位

正数的补码第一位为0，负数的补码第一位为1，所以两者的边界是0x7FFFFFFF

负数求补码的过程：对应的正数二进制减1，取反（包括符号位）。

补码求负数：对应的补码取反（包括符号位），加1，前面加上负号

~(n) = -(n+1)



# 代码

class Solution(object):
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """
        while b:
            a, b = (a ^ b) & 0xffffffff, ((a & b) << 1) & 0xffffffff
        return a if a <= 0x7fffffff else ~(a ^ 0xffffffff)
        
        
