# 题目

给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

示例 1:

输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。
示例 2:

输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。
示例 3:

输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。


# 思路

将单词转变为数字（可以将数字的二进制的后26位用来表示字母时候出现），然后利用与运算来判断两个单词是否有共同的字母。


# 代码

class Solution(object):
    def maxProduct(self, words):
        """
        :type words: List[str]
        :rtype: int
        """
        new_words = []
        for w in words:
            tmp = 0
            for c in w:
                tmp = 1 << (ord(c) - ord('a')) | tmp
            new_words.append(tmp)
        res = 0
        for i in range(len(new_words)):
            for j in range(i+1, len(new_words)):
                if new_words[i] & new_words[j] == 0:
                    res = max(res, len(words[i]) * len(words[j]))
        return res


