# 题目

给定一个单词数组和一个长度 maxWidth，重新排版单词，使其成为每行恰好有 maxWidth 个字符，且左右两端对齐的文本。

你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格 ' ' 填充，使得每行恰好有 maxWidth 个字符。

要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。

文本的最后一行应为左对齐，且单词之间不插入额外的空格。

说明:

单词是指由非空格字符组成的字符序列。
每个单词的长度大于 0，小于等于 maxWidth。
输入单词数组 words 至少包含一个单词。
示例:

输入:
words = ["This", "is", "an", "example", "of", "text", "justification."]
maxWidth = 16
输出:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
示例 2:

输入:
words = ["What","must","be","acknowledgment","shall","be"]
maxWidth = 16
输出:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
解释: 注意最后一行的格式应为 "shall be    " 而不是 "shall     be",
     因为最后一行应为左对齐，而不是左右两端对齐。       
     第二行同样为左对齐，这是因为这行只包含一个单词。
示例 3:

输入:
words = ["Science","is","what","we","understand","well","enough","to","explain",
         "to","a","computer.","Art","is","everything","else","we","do"]
maxWidth = 20
输出:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]


# 思路

先仅考虑单词之间的间隔是一个空格，来将单词按照行分组，即确定每一行有哪些单词，然后对每一行字符串进行填充空格，通过计算得到每一个空隙之间应该填充几个空格（首先将空格平均分配，然后多余的从左向右依次加1），重新构造字符串。

注意最后一行，单词之间只有一个空格，多余的空格都被放置到后面


# 代码

class Solution(object):
    def fullJustify(self, words, maxWidth):
        """
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        """
        res = []
        tmp = ''
        for w in words:
            if not tmp:
                tmp = w
            elif len(tmp) + len(w) < maxWidth:
                tmp = tmp + ' ' + w
            else:
                res.append(self.helper(tmp, maxWidth))
                tmp = w
        # 最后一行
        res.append(tmp + ' ' * (maxWidth - len(tmp)))
        return res
    
    def helper(self, s, maxWidth):
        s = s.split(' ')
        if len(s) == 1:
            return s[0] + ' ' * (maxWidth - len(s[0]))

        rest_len = maxWidth - sum([len(x) for x in s])
        avg_gap = rest_len // (len(s) - 1)
        addition = rest_len % (len(s) - 1)
        gaps = [avg_gap] * (len(s) - 1)
        for i in range(addition):
            gaps[i] += 1
        res = s[0]
        for i in range(1, len(s)):
            res = res + ' ' * gaps[i-1] + s[i]
        return res
        

