# 题目

给定一个正整数 n ，输出外观数列的第 n 项。

「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。

你可以将其视作是由递归公式定义的数字字符串序列：

countAndSay(1) = "1"
countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。
前五项如下：

1.     1
2.     11
3.     21
4.     1211
5.     111221
第一项是数字 1 
描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"
描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"
描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"
描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"
要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。

# 思路

依据前一个字符串得到当前的值，比如'1113321',从左向右，有3个1（31）,2个3（23），一个2（12），一个1（11），因此结果就是31231211，即将字符串分割成元素连续相等的子串，根据子串的长度和元素值得到结果

# 代码

class Solution(object):
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        if n == 1:
            return '1'
        i = 2
        res = '1'
        while i <= n:
            res = self.helper1(res)
            i += 1
        return res
    # 分割字符串方法1
    def helper(self, s):
        tmp = s[0]
        for i in range(1, len(s)):
            if s[i] != s[i-1]:
                tmp = tmp + ' ' + s[i]
            else:
                tmp += s[i]
        tmp = tmp.split(' ')
        res = [str(len(x)) + x[0] for x in tmp]
        return ''.join(res)
    # 分割字符串方法2
    def helper1(self, s):
        tmp = ''
        c = 1
        for i in range(1, len(s)):
            if s[i] != s[i-1]:
                tmp += str(c) + s[i-1]
                c = 1
            else:
                c += 1
        tmp += str(c) + s[-1]
        return tmp


