# 题目

你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：

你写出一个秘密数字，并请朋友猜这个数字是多少。
朋友每猜测一次，你就会给他一个提示，告诉他的猜测数字中有多少位属于数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位属于数字猜对了但是位置不对（称为“Cows”, 奶牛）。
朋友根据提示继续猜，直到猜出秘密数字。
请写出一个根据秘密数字和朋友的猜测数返回提示的函数，返回字符串的格式为 xAyB ，x 和 y 都是数字，A 表示公牛，用 B 表示奶牛。

xA 表示有 x 位数字出现在秘密数字中，且位置都与秘密数字一致。
yB 表示有 y 位数字出现在秘密数字中，但位置与秘密数字不一致。
请注意秘密数字和朋友的猜测数都可能含有重复数字，每位数字只能统计一次。

 

示例 1:

输入: secret = "1807", guess = "7810"
输出: "1A3B"
解释: 1 公牛和 3 奶牛。公牛是 8，奶牛是 0, 1 和 7。
示例 2:

输入: secret = "1123", guess = "0111"
输出: "1A1B"
解释: 朋友猜测数中的第一个 1 是公牛，第二个或第三个 1 可被视为奶牛。
 

说明: 你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。

# 思路


题目中实际求两个解

1 求位置正确且数字一致的解
2 求位置不正确但数字一致的解

问题1很简单，只需要遍历一次，两者在相同索引下，判断相等即刻。

主要是问题2，因为问题2需要在问题1的基础上处理，不然会错判。这里借助哈希表。

遍历过程，只要不满足问题1的，都执行以下操作：
数组A往哈希中，+1
数组B往哈希中，-1

那么结果最终结果是，如果出现相同数字，会互相加减进行抵消，剩下的就是无法匹配相加减的数字，但结果总数加起来始终为0
我们只要取正数或负数相加起来，就是不匹配的数量，只要用总数-公牛数-不匹配的数量 就可以获得奶牛数


# 代码

class Solution(object):
    def getHint(self, secret, guess):
        """
        :type secret: str
        :type guess: str
        :rtype: str
        """

        bulls = 0
        i = 0
        tmp = {}
        while i < len(secret):
            if secret[i] == guess[i]:
                bulls += 1
            else:
                tmp[secret[i]] = tmp.get(secret[i], 0) + 1
                tmp[guess[i]] = tmp.get(guess[i], 0) - 1
            i += 1
        
        cows = len(secret) - bulls - sum([tmp[x] for x in tmp if tmp[x] > 0])
        return str(bulls) + 'A' + str(cows) + 'B'


                
