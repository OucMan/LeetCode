# 题目

给定两个表示复数的字符串。

返回表示它们乘积的字符串。注意，根据定义 i2 = -1 。

示例 1:

输入: "1+1i", "1+1i"
输出: "0+2i"
解释: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。
示例 2:

输入: "1+-1i", "1+-1i"
输出: "0+-2i"
解释: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 
注意:

输入字符串不包含额外的空格。
输入字符串将以 a+bi 的形式给出，其中整数 a 和 b 的范围均在 [-100, 100] 之间。输出也应当符合这种形式。


# 思路

(a + bi) * (c + di) = (ac-bd) + (ad+bc)i

因此只要能根据复数字符串得到abcd即可

# 代码

class Solution(object):
    def complexNumberMultiply(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: str
        """
        if not a or not b:
            return '0'
        
        tmp = a.split('+')
        m, n = 0, 0
        m = int(tmp[0])
        if len(tmp) > 1:
            n = int(tmp[1][:-1])
        
        tmp = b.split('+')
        i, j = 0, 0
        i = int(tmp[0])
        if len(tmp) > 1:
            j = int(tmp[1][:-1])
        
        r0 = m * i - n * j
        r1 = m * j + n * i

        return str(r0) + '+' + str(r1) + 'i'

    
