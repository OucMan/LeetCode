# 题目

TinyURL是一种URL简化服务， 比如：当你输入一个URL https://leetcode.com/problems/design-tinyurl 时，它将返回一个简化的URL http://tinyurl.com/4e9iAk.

要求：设计一个 TinyURL 的加密 encode 和解密 decode 的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。



# 思路

借助字典，用来完成解码，其中key为编码后的值，value为原值，重点就是key值是什么？需要保证不发生冲突，我们采用固定长度的key,在所有的数字和字母中随机选择6位组成key


# 代码

import random

class Codec:

    def __init__(self):
        self.based = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        self.tables = {}
    
    def getKey(self, n):
        key = ''
        for i in range(n):
            key += self.based[random.randint(0, 61)]
        return key

    def encode(self, longUrl):
        """Encodes a URL to a shortened URL.
        
        :type longUrl: str
        :rtype: str
        """
        key = self.getKey(6)
        while key in self.tables:
            key = self.getKey(6)
        self.tables[key] = longUrl
        return 'http://tinyurl.com/' + key

        

    def decode(self, shortUrl):
        """Decodes a shortened URL to its original URL.
        
        :type shortUrl: str
        :rtype: str
        """
        key = shortUrl.replace('http://tinyurl.com/', '')
        return self.tables[key]
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))
