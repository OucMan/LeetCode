# 题目

给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

 

示例 1：

输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123。
示例 2：

输入：digits = [4,3,2,1]
输出：[4,3,2,2]
解释：输入数组表示数字 4321。
示例 3：

输入：digits = [0]
输出：[1]
 

提示：

1 <= digits.length <= 100
0 <= digits[i] <= 9


# 思路

从后向前遍历，注意进位即可


# 代码

class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        jinwei = 0
        for i in range(len(digits)-1, -1, -1):
            if i == len(digits) - 1:
                tmp = digits[i]
                digits[i] = (digits[i] + 1 + jinwei) % 10
                jinwei = (tmp + 1 + jinwei) // 10
            else:
                tmp = digits[i]
                digits[i] = (digits[i] + jinwei) % 10
                jinwei = (tmp + jinwei) // 10
            if jinwei == 0:
                break
        if jinwei == 1:
            digits.insert(0, 1)
        return digits
