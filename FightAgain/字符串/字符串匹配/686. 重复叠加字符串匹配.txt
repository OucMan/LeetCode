# 题目

给定两个字符串 a 和 b，寻找重复叠加字符串 a 的最小次数，使得字符串 b 成为叠加后的字符串 a 的子串，如果不存在则返回 -1。

注意：字符串 "abc" 重复叠加 0 次是 ""，重复叠加 1 次是 "abc"，重复叠加 2 次是 "abcabc"。

 

示例 1：

输入：a = "abcd", b = "cdabcdab"
输出：3
解释：a 重复叠加三遍后为 "abcdabcdabcd", 此时 b 是其子串。
示例 2：

输入：a = "a", b = "aa"
输出：2
示例 3：

输入：a = "a", b = "a"
输出：1
示例 4：

输入：a = "abc", b = "wxyz"
输出：-1
 

提示：

1 <= a.length <= 104
1 <= b.length <= 104
a 和 b 由小写英文字母组成



# 思路

首先如果存在b字符串中的字符不存在与a字符串，那么直接返回-1，然后比较长度，首先在长度上看看b相当于几个a，假如b相当于n个a(即至少n个a的长度才不小于b的长度)，那么n+1个a就把所有的长度和b一样的子串包含，因此，我们只需要判断n*a中是否包含b以及(n+1)是否包含b即可。


# 代码

class Solution(object):
    def repeatedStringMatch(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: int
        """
        if not set(b).issubset(set(a)):
            return -1
        
        start = len(b) // len(a)
        ths = start + 2
        # 我们遍历start, start+1, start+2，是因为要对整除和不能整除的情况统一考虑
        while start <= ths:
            if b in a * start:
                return start
            start += 1
        return -1
        
        
