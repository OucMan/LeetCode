# 题目

请你实现一个数据结构支持以下操作：

Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。
Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否则使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。
GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串"" 。
GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串""。
 

挑战：

你能够以 O(1) 的时间复杂度实现所有操作吗？


# 思路

一个字典存key:val
一个字典存val:{key,..}

# 代码

class AllOne(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.v = {}
        self.d = {}


    def inc(self, key):
        """
        Inserts a new key <Key> with value 1. Or increments an existing key by 1.
        :type key: str
        :rtype: None
        """
        if key not in self.d:
            self.d[key] = 1
            if 1 not in self.v:
                self.v[1] = {key}
            else:
                self.v[1].add(key)
        else:
            self.v[self.d[key]].remove(key)
            if len(self.v[self.d[key]]) == 0:
                del self.v[self.d[key]]
            self.d[key] += 1
            if self.d[key] not in self.v:
                self.v[self.d[key]] = {key}
            else:
                self.v[self.d[key]].add(key)



    def dec(self, key):
        """
        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.
        :type key: str
        :rtype: None
        """
        if key not in self.d:
            return
        elif self.d[key] == 1:
            del self.d[key]
            self.v[1].remove(key)
            if len(self.v[1]) == 0:
                del self.v[1]
        else:
            self.v[self.d[key]].remove(key)
            if len(self.v[self.d[key]]) == 0:
                del self.v[self.d[key]]
            self.d[key] -= 1
            if self.d[key] not in self.v:
                self.v[self.d[key]] = {key}
            else:
                self.v[self.d[key]].add(key)

    def getMaxKey(self):
        """
        Returns one of the keys with maximal value.
        :rtype: str
        """
        if not self.v:
            return ''
        m = max(self.v)
        return next(iter(self.v[m]))


    def getMinKey(self):
        """
        Returns one of the keys with Minimal value.
        :rtype: str
        """
        if not self.v:
            return ''
        m = min(self.v)
        return next(iter(self.v[m]))



# Your AllOne object will be instantiated and called as such:
# obj = AllOne()
# obj.inc(key)
# obj.dec(key)
# param_3 = obj.getMaxKey()
# param_4 = obj.getMinKey()

