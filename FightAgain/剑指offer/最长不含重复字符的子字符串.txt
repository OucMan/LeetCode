# 题目

请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

 

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
 

提示：

s.length <= 40000


# 思路

# 代码

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or len(s) == 1:
            return len(s)
        
        dp = [1] * len(s)
        for i in range(1, len(s)):
            pre = s[i-dp[i-1]:i]
            if s[i] not in pre:
                dp[i] = dp[i-1] + 1
            else:
                dp[i] = dp[i-1] - pre.index(s[i])
        
        return max(dp)
        
        
