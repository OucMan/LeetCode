# 题目

请实现两个函数，分别用来序列化和反序列化二叉树。

示例: 

你可以将以下二叉树：

    1
   / \
  2   3
     / \
    4   5

序列化为 "[1,2,3,null,null,4,5]"

# 思路


# 题目

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return '[]'
        queue = [root]
        res = []
        while queue:
            node = queue.pop(0)
            if not node:
                res.append('null')
            else:
                res.append(str(node.val))
                queue.append(node.left)
                queue.append(node.right)
        return '[' + ','.join(res) + ']'
    


    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == '[]':
            return None
        data = data[1:-1].split(',')
        root = TreeNode(int(data[0]))
        queue = [root]
        i = 1
        while queue:
            node = queue.pop(0)
            tmp = data[i]
            if tmp != 'null':
                n = TreeNode(int(tmp))
                node.left = n
                queue.append(n)
            i += 1
            tmp = data[i]
            if tmp != 'null':
                n = TreeNode(int(tmp))
                node.right = n
                queue.append(n)
            i += 1
        return root



        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))

