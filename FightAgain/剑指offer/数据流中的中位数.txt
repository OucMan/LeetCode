# 题目

如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。

例如，

[2,3,4] 的中位数是 3

[2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：

void addNum(int num) - 从数据流中添加一个整数到数据结构中。
double findMedian() - 返回目前所有元素的中位数。
示例 1：

输入：
["MedianFinder","addNum","addNum","findMedian","addNum","findMedian"]
[[],[1],[2],[],[3],[]]
输出：[null,null,null,1.50000,null,2.00000]
示例 2：

输入：
["MedianFinder","addNum","findMedian","addNum","findMedian"]
[[],[2],[],[3],[]]
输出：[null,null,2.00000,null,2.50000]
 

限制：

最多会对 addNum、findMedian 进行 50000 次调用。

# 思路

两个堆

大顶推保存排序数列的前半部分，小顶堆保存排序数列的后半部分。

大顶堆的长度大于等于小顶堆


# 代码

import heapq

class MedianFinder(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.big_heap = []
        self.small_heap = []
        heapq.heapify(self.big_heap)
        heapq.heapify(self.small_heap)


    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """
        if not self.big_heap:
            heapq.heappush(self.big_heap, -1 * num)
            return
        if len(self.big_heap) > len(self.small_heap):
            if num < -1 * self.big_heap[0]:
                tmp = heapq.heappop(self.big_heap)
                heapq.heappush(self.big_heap, -1 * num)
                heapq.heappush(self.small_heap, -1 * tmp)
            else:
                heapq.heappush(self.small_heap, num)
        elif len(self.big_heap) == len(self.small_heap):
            if num > self.small_heap[0]:
                tmp = heapq.heappop(self.small_heap)
                heapq.heappush(self.small_heap, num)
                heapq.heappush(self.big_heap, -1 * tmp)
            else:
                heapq.heappush(self.big_heap, -1 * num)

    def findMedian(self):
        """
        :rtype: float
        """
        if len(self.big_heap) > len(self.small_heap):
            return -1 * self.big_heap[0]
        else:
            return (-1 * self.big_heap[0] + self.small_heap[0]) / 2.0

# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()

