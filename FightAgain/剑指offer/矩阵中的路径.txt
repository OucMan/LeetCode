# 题目

请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

 

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：

输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
 

提示：

1 <= board.length <= 200
1 <= board[i].length <= 200


# 思路

回溯

回溯的本质是递归

递归的出口：待匹配的单词为空返回True，或者索引越界，当前位置已经访问过，当前位置与单词首字母不匹配返回False

递归的参数：board，边界、当前位置、剩余单词以及访问记录

递归的逻辑：首先判断出口是否满足，设置访问记录，递归处理，根据处理结果回溯


# 代码

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        rows, cols = len(board), len(board[0])
        visited = [[True] * cols for _ in range(rows)]
        for i in range(rows):
            for j in range(cols):
                if self.helper(board, i, j, rows, cols, word, visited):
                    return True
        return False
    
    def helper(self, board, i, j, rows, cols, word, visited):
        if not word:
            return True
        if not 0<=i<rows or not 0<=j<cols or not visited[i][j] or board[i][j] != word[0]:
            return False
        visited[i][j] = False
        res = False
        for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            n_i, n_j = i + x, j + y
            res = res or self.helper(board, n_i, n_j, rows, cols, word[1:], visited)
        if not res:
            visited[i][j] = True
        return res
        
        
