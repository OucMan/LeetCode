# 题目

给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
提示：

2 <= n <= 58


# 思路

动态规划

dp[i]表示长度为i的绳子的最大乘积值(也就表示了肯定至少切割过一次)，其中i>=2

初始化dp为0，dp[1]=1，表示不切割

j为切割点，对于长度为i的绳子，其范围是[1,...,i-1]，前一段绳子长度为j，后一段绳子长度为i-j，两段绳子最大乘积值分别为max(j, dp[j])和max((i-j), dp[i-j])，其中j和i-j表示不切割的情况。因此

dp[i] = max(dp[i], max(j, dp[j]) * max((i-j), dp[i-j]))

前后两段绳子没有什么不同，因此j遍历范围可以为[1, i//2+1]




# 代码

class Solution(object):
    def cuttingRope(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0] * (n+1)
        dp[1] = 1
        for i in range(1, n+1):
            for j in range(1, i//2 + 1):
                dp[i] = max(max(j, dp[j]) * max((i-j), dp[i-j]), dp[i])
        return dp[-1]
        
        
