# 题目

从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]
 

提示：

节点总数 <= 1000



# 思路


# 代码

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        queue = [root]
        cur_layer = []
        next_layer = []
        res = []

        while queue:
            node = queue.pop(0)
            if node.left:
                next_layer.append(node.left)
            if node.right:
                next_layer.append(node.right)
            cur_layer.append(node.val)
            if not queue:
                res.append(cur_layer)
                cur_layer = []
                queue = next_layer
                next_layer = []
        
        return res

