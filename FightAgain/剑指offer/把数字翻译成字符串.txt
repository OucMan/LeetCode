# 题目

给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231


# 思路


# 代码

class Solution(object):
    def translateNum(self, num):
        """
        :type num: int
        :rtype: int
        """
        return self.helper(str(num))
    
    def helper(self, num):
        if len(num) <= 1:
            return 1
        res = self.helper(num[1:])
        if len(num) >= 2 and num[0] != '0':
            if 10 <= int(num[:2]) <= 25:
                res += self.helper(num[2:])
        return res
            
        
