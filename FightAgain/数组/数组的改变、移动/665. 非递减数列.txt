# 题目

给你一个长度为 n 的整数数组，请你判断在 最多 改变 1 个元素的情况下，该数组能否变成一个非递减数列。

我们是这样定义一个非递减数列的： 对于数组中所有的 i (0 <= i <= n-2)，总满足 nums[i] <= nums[i + 1]。

 

示例 1:

输入: nums = [4,2,3]
输出: true
解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。
示例 2:

输入: nums = [4,2,1]
输出: false
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。
 

说明：

1 <= n <= 10 ^ 4
- 10 ^ 5 <= nums[i] <= 10 ^ 5


# 思路

记录当前节点比前一节点小这种情况出现的次数，当次数大于1的时候，肯定返回false，但是次数等于1的时候一定返回true吗？有一个特殊的情况，即使只有一个下降的情况，也无法通过一个改变一个点来使序列非递减，即，当nums[i] < nums[i-1]时，nums[i-2] > nums[i]同时nums[i-1]>num[i+1]，这种情况下直接返回False


# 代码

class Solution(object):
    def checkPossibility(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums or len(nums) <= 2:
            return True
        N = len(nums)
        c = 0
        for i in range(1, N):
            if nums[i] < nums[i-1]:
                if i-2>=0 and i+1<N:
                    if nums[i-2] > nums[i] and nums[i-1]> nums[i+1]:
                        return False
                c += 1
        return True if c<= 1 else False
                
        
