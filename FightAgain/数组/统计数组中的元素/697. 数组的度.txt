# 题目

给定一个非空且只包含非负数的整数数组 nums, 数组的度的定义是指数组里任一元素出现频数的最大值。

你的任务是找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。

示例 1:

输入: [1, 2, 2, 3, 1]
输出: 2
解释: 
输入数组的度是2，因为元素1和2的出现频数最大，均为2.
连续子数组里面拥有相同度的有如下所示:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
最短连续子数组[2, 2]的长度为2，所以返回2.
示例 2:

输入: [1,2,2,3,1,4,2]
输出: 6
注意:

nums.length 在1到50,000区间范围内。
nums[i] 是一个在0到49,999范围内的整数。

# 思路

遍历列表，保存一个字典{num: [left, right, counter]}，num为元素的值，left为最早出现num的index，right为最后出现num的index，counter为num出现的次数。


# 代码

class Solution(object):
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        locations = {} # {num: [left, right, counter]}
        res = float('inf')
        max_counter = 0
        for i in range(len(nums)):
            if nums[i] in locations:
                locations[nums[i]][1] = i
                locations[nums[i]][2] += 1
            else:
                locations[nums[i]] = [i, i, 1]
            if locations[nums[i]][2] > max_counter:
                    max_counter = locations[nums[i]][2]
        for num in locations:
            if locations[num][2] == max_counter and res > (locations[num][1] - locations[num][0] + 1):
                res = locations[num][1] - locations[num][0] + 1
        return res


