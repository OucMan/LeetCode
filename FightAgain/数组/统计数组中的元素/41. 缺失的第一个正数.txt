# 题目


给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。

示例 1:

输入: [1,2,0]
输出: 3
示例 2:

输入: [3,4,-1,1]
输出: 2
示例 3:

输入: [7,8,9,11,12]
输出: 1
 

提示：

你的算法的时间复杂度应为O(n)，并且只能使用常数级别的额外空间。


# 思路

列表的长度为N，最后的结果在区间[1, N+1]中， 假如列表元素为集合[1,N]，则结果为N+1，假如列表中的元素有其他的值，那么结果在[1,N]中。因此，题目就变成了找到原列表中哪些元素不在[1,N]中，并找到缺失的最小的那个，如果都在那么结果就是N+1

首先将对原列表遍历，对不在[1,N]的元素重新赋值为N+1，得到新列表

对新列表进行遍历，对绝对值在[1,N]的元素进行处理，使用元素A的值作为索引，通过标记索引对应的元素B来表明A元素存在，标记的方式为正转变为负，负不变，得到最新列表

再对最新的列表进行遍历，找到首先大于0的值对应的索引i，i+1即为最小的不存在的正数值，假如值全部小于0，则返回N+1

# 代码

class Solution(object):
    def firstMissingPositive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        N = len(nums)
        for i in range(N):
            if nums[i] < 1 or nums[i] > N:
                nums[i] = N + 1
        
        for i in range(N):
            if 1 <= abs(nums[i]) <= N:
                new_index = abs(nums[i]) - 1
                if nums[new_index] > 0:
                    nums[new_index] *= -1
        
        for i in range(N):
            if nums[i] > 0:
                return i + 1

        return N + 1

