# 题目


给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]

# 思路

可以直接使用集合的差集，但是会引入额外的空间，

因为元素的值在1到N之间，因此可以使用元素的值作为索引，对该索引的值进行标记（如果已经标记过的话就不用重复操作），最后查看哪些索引没有被标记，便可以得到没有出现的元素。

比如，num[0] = 2，因此我们就将流表的第二个元素标记一下（正变负，负不变），当最后查看的时候，发现第二个值为负的，则确定2是存在的


# 代码

class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """

        for i in range(len(nums)):
            new_index = abs(nums[i]) - 1
            if nums[new_index] > 0:
                nums[new_index] = nums[new_index] * - 1
        
        res = []
        for i in range(len(nums)):
            if nums[i] > 0:
                res.append(i+1)
        return res
        
        
        
