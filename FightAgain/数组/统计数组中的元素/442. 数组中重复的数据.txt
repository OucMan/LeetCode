# 题目

给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。

找到所有出现两次的元素。

你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？

示例：

输入:
[4,3,2,7,8,2,3,1]

输出:
[2,3]


# 思路

使用A元素值作为索引，通过标记索引所对应的B元素来表明A元素的存在，标记的方式，将正数变为负数，假如索引对应的B元素已经为负，则说明A元素之前出现过（因此，B元素才会为负）


# 代码

class Solution(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = []
        for i in range(len(nums)):
            new_index = abs(nums[i]) - 1
            if nums[new_index] > 0:
                nums[new_index] = nums[new_index] * -1
            else:
                res.append(new_index + 1)
        return res
        
        
