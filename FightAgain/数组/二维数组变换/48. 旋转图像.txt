# 题目

给定一个 n × n 的二维矩阵表示一个图像。

将图像顺时针旋转 90 度。

说明：

你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。

示例 1:

给定 matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
示例 2:

给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]


# 思路

从最外一圈依次向内遍历，找到旋转后位置之间的关系，
详细思路见
https://leetcode-cn.com/problems/rotate-image/solution/li-kou-48xiao-bai-du-neng-kan-dong-de-fang-fa-zhu-/


# 代码

class Solution(object):
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        if not matrix or not matrix[0] or len(matrix) != len(matrix[0]):
            return
        
        a, b = 0, len(matrix) - 1
        while a < b:
            add = 0
            while add < b - a:
                tmp = matrix[a][a+add]
                matrix[a][a+add] = matrix[b-add][a]
                matrix[b-add][a] = matrix[b][b-add]
                matrix[b][b-add] = matrix[a+add][b]
                matrix[a+add][b] = tmp
                add += 1
            a += 1
            b -= 1

  
