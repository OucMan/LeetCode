# 题目

根据 百度百科 ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

 

示例：

输入： 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出：
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
 

进阶：

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？


# 思路

在原列表四周增加0，使得边界上的点也能够正常处理

# 代码

class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        if not board or not board[0]:
            return
        
        rows = len(board)
        cols = len(board[0])
        
        board_exp = [[0] * (cols + 2)]
        for item in board:
            board_exp.append([0] + item + [0])
        board_exp.append([0] * (cols + 2))

        for i in range(1, rows+1):
            for j in range(1, cols+1):
                s = sum(board_exp[i-1][j-1:j+2]) + sum(board_exp[i][j-1:j+2]) + sum(board_exp[i+1][j-1:j+2])
                if board_exp[i][j] == 0 and s == 3:
                    board[i-1][j-1] = 1
                else:
                    s -= 1
                    if s < 2:
                        board[i-1][j-1] = 0
                    elif s > 3:
                        board[i-1][j-1] = 0

