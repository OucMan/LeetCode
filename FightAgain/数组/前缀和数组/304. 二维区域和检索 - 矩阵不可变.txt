# 题目

# 思路

初始化的时候，创建累积和的列表，s[i][j]为从(0,0)-(i,j)这个矩阵的和，然后题目中(row1, col1)-(row2, col2)的子矩阵之和为s[row2][col2] + s[row1-1][col1-1] - s[row2][col1-1] - s[row1-1][col2]

# 代码

class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        if not matrix or not matrix[0]:
            return
        rows = len(matrix)
        cols = len(matrix[0])
        self.sum_matriex = [[0 for i in range(cols)] for j in range(rows)]
        self.sum_matriex[0][0] = matrix[0][0]
        for i in range(1, rows):
            self.sum_matriex[i][0] = self.sum_matriex[i-1][0] + matrix[i][0]
        for i in range(1, cols):
            self.sum_matriex[0][i] = self.sum_matriex[0][i-1] + matrix[0][i]
        for i in range(1, rows):
            for j in range(1, cols):
                self.sum_matriex[i][j] = self.sum_matriex[i][j-1] + self.sum_matriex[i-1][j] - self.sum_matriex[i-1][j-1] + matrix[i][j]
        # 四周加上0，方便边界处理
        self.sum_matriex.append([0 for i in range(cols)])
        self.sum_matriex.insert(0, [0 for i in range(cols)])
        for i in range(len(self.sum_matriex)):
            self.sum_matriex[i].append(0)
            self.sum_matriex[i].insert(0, 0)
        

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        a = self.sum_matriex[row1][col1]
        b = self.sum_matriex[row2+1][col1]
        c = self.sum_matriex[row1][col2+1]
        d = self.sum_matriex[row2+1][col2+1]
        return d + a - b - c



# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
