# 题目


# 思路

A为原列表

归纳出公式

F(i) = F(i-1) + len(A) * A[i-1] - sum(A)

假如A = [a, b, c, d]
F(0) = 0 * a + 1 * b + 2 * c + 3 * d
F(1) = 0 * b + 1 * c + 2 * d + 3 * a
F(2) = 0 * c + 1 * d + 2 * a + 3 * b
F(3) = 0 * d + 1 * a + 2 * b + 3 * c

F(1) - F(0) = 3a - b -c - d = 4a - (a+b+c+d)
F(2) - F(1) = 3b - a -c - d = 4b - (a+b+c+d)
F(3) - F(2) = 3c - a -b - d = 4c - (a+b+c+d)

得到F(i) = F(i-1) + len(A) * A[i-1] - sum(A)


# 代码

class Solution(object):
    def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if not A or len(A) == 1:
            return 0
        n = len(A)
        s = sum(A)
        f = sum([i * A[i] for i in range(n)]) # F(0)
        res = f
        for i in range(n):
            tmp = f + n * A[i] - s 
            res = max(res, tmp)
            f = tmp
        return res

