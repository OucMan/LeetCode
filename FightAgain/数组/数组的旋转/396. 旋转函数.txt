# 题目

给定一个长度为 n 的整数数组 A 。

假设 Bk 是数组 A 顺时针旋转 k 个位置后的数组，我们定义 A 的“旋转函数” F 为：

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]。

计算F(0), F(1), ..., F(n-1)中的最大值。

注意:
可以认为 n 的值小于 105。

示例:

A = [4, 3, 2, 6]

F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。


# 思路

A为原列表

归纳出公式

F(i) = F(i-1) + len(A) * A[i-1] - sum(A)

假如A = [a, b, c, d]
F(0) = 0 * a + 1 * b + 2 * c + 3 * d
F(1) = 0 * b + 1 * c + 2 * d + 3 * a
F(2) = 0 * c + 1 * d + 2 * a + 3 * b
F(3) = 0 * d + 1 * a + 2 * b + 3 * c

F(1) - F(0) = 3a - b -c - d = 4a - (a+b+c+d)
F(2) - F(1) = 3b - a -c - d = 4b - (a+b+c+d)
F(3) - F(2) = 3c - a -b - d = 4c - (a+b+c+d)

得到F(i) = F(i-1) + len(A) * A[i-1] - sum(A)


# 代码

class Solution(object):
    def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        if not A or len(A) == 1:
            return 0
        n = len(A)
        s = sum(A)
        f = sum([i * A[i] for i in range(n)]) # F(0)
        res = f
        for i in range(n):
            tmp = f + n * A[i] - s 
            res = max(res, tmp)
            f = tmp
        return res

