# 题目

给定一个二维的甲板， 请计算其中有多少艘战舰。 战舰用 'X'表示，空位用 '.'表示。 你需要遵守以下规则：

给你一个有效的甲板，仅由战舰或者空位组成。
战舰只能水平或者垂直放置。换句话说,战舰只能由 1xN (1 行, N 列)组成，或者 Nx1 (N 行, 1 列)组成，其中N可以是任意大小。
两艘战舰之间至少有一个水平或垂直的空位分隔 - 即没有相邻的战舰。
示例 :

X..X
...X
...X
在上面的甲板中有2艘战舰。

无效样例 :

...X
XXXX
...X
你不会收到这样的无效甲板 - 因为战舰之间至少会有一个空位将它们分开。

进阶:

你可以用一次扫描算法，只使用O(1)额外空间，并且不修改甲板的值来解决这个问题吗？



# 思路

遍历二维列表，如果当前元素为'X',则先默认增加一个战舰，当它上面的元素或者左边为'X'，则说明该战舰已经被计数过，故再将默认增加的战舰数减掉

注意，第0行和第0列的情况

# 代码

class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        if not board or not board[0]:
            return 0
        res = 0
        rows = len(board)
        cols = len(board[0])
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == 'X':
                    res += 1
                    if i==0 and j > 0 and board[i][j-1] == 'X':
                        res -= 1
                    elif j==0 and i > 0 and board[i-1][j] == 'X':
                        res -= 1
                    elif i > 0 and j > 0:
                        if board[i][j-1] == 'X' or board[i-1][j] == 'X':
                            res -= 1
        return res
        
        
