# 题目

给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。

 

提示：

如果存在多种有效的行程，请你按字符自然排序返回最小的行程组合。例如，行程 ["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前
所有的机场都用三个大写字母表示（机场代码）。
假定所有机票至少存在一种合理的行程。
所有的机票必须都用一次 且 只能用一次。
 

示例 1：

输入：[["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
输出：["JFK", "MUC", "LHR", "SFO", "SJC"]
示例 2：

输入：[["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
输出：["JFK","ATL","JFK","SFO","ATL","SFO"]
解释：另一种有效的行程是 ["JFK","SFO","ATL","JFK","ATL","SFO"]。但是它自然排序更大更靠后。



# 思路

回溯

首先排序

回溯本质上就是递归

递归的出口：当行程的长度等于票数+1，即直接返回结果，因为我们已经排序了，所以找到的第一个满足条件的行程就是最小的行程。

递归的参数：当前行程和候选机票

递归的逻辑：首先判断出口条件，然后依次处理候选机票，找到能够起点等于当前行程最后一个地点的车票，将该车票的终点加入到行程中，递归调用。

# 代码

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """

        self.res = None
        tickets.sort()
        n = len(tickets)
        def back(item, can):
            if len(item) == n+1:
                self.res = item
                return True
            for i in can:
                if item[-1] == i[0]:
                    tmp = can[:]
                    tmp.remove(i)
                    if back(item + [i[1]], tmp):
                        return True
            return False
        
        back(['JFK'], tickets)

        return self.res





