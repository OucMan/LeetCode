# 题目

n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

 

示例：

输入：4
输出：[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。
 

提示：

皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。



# 思路

回溯

回溯本质是递归

递归出口：当已经为N个皇后放好位置，将位置信息保存到结果列表，返回即可

递归参数：目前已经确定的皇后的位置

递归逻辑：首先判断是否满足出口条件，然后为当前皇后循环尝试每一个位置，判断位置的合法性，如果合法，递归调用函数，继续判断

# 代码

class Solution(object):
    def solveNQueens(self, nums):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        final_queue = []

        def conflict(queen_str, current_queue):
            queen_len = len(queen_str)
            for i in range(queen_len):
                if abs(current_queue-int(queen_str[i])) in (0, queen_len-i):
                    return False
            return True
        
        def back(queen_str):
            if len(queen_str) == nums:
                tmp = []
                for i in queen_str:
                    tmp.append('.' * int(i) + 'Q' + '.' * (nums-int(i)-1))
                final_queue.append(tmp)
                return
            for i in range(nums):
                flag = conflict(queen_str, i)
                if flag:
                    back(queen_str+str(i))

        back('')
        return final_queue
    
    



