# 题目

给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


# 思路

回溯

回溯的本质是递归

递归的出口：排列列表中元素的个数是否等于源列表长度

递归的输入：排列列表和候选集合，这里候选集合就是整体集合减去当前加入的元素

递归的逻辑：首先判断递归出口，接着在候选集合中依次尝试将元素加入到排列集合，然后递归调用。注意这里我们需要对候选集合进行深拷贝，避免递归返回退出时，候选集合改变


# 代码

class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        n = len(nums)
        res = []
        def back(item, can):
            if len(item) == n:
                res.append(item)
                return
            for c in can:
                tmp = can[::]
                tmp.remove(c)
                back(item + [c], tmp)
        back([], nums)
        return res

            
