# 题目

给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]


# 思路

回溯

回溯本质上是递归

递归的出口：如果当前序列没有出现过，那么将其添加到结果集合中

递归的参数：当前序列和后续元素的候选集合

递归的逻辑：首先判断出口条件是否满足，然后将候选集合中的元素依次添加进序列中，并调用递归。


# 代码

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """

        self.res = []

        def back(item, can):
            if item not in self.res:
                self.res.append(item)
            for i in range(len(can)):
                tmp = can[i+1:]
                back(item + [can[i]], tmp)
        
        back([], nums)

        return self.res
        
        
