# 题目

给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。
 

示例 1：

输入：nums = [1,1,2]
输出：
[[1,1,2],
 [1,2,1],
 [2,1,1]]
示例 2：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

提示：

1 <= nums.length <= 8
-10 <= nums[i] <= 10



# 思路

回溯

回溯就是递归

首先将候选集合排序，为了更好的剪枝

递归的出口：排列元素的个数等于nums的长度

递归的参数：当前排列列表，以及候选元素集合

递归的逻辑：判断是否满足出口条件；依次将候选集合中元素添加进组合列表，这里有一个剪枝操作，即如果当前元素等于候选集合中它的前一个元素，那么就跳过本次操作，因此，该结果已经在处理前一个元素是得到，然后递归，注意需要使用临时列表，避免递归返回时，候选集合改变


# 代码

class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        n = len(nums)
        res = []

        def back(item, can):
            if len(item) == n:
                res.append(item)
                return
            for i in range(len(can)):
                if i > 0 and can[i] == can[i-1]:
                    continue
                tmp = can[:]
                tmp.remove(can[i])
                back(item + [can[i]], tmp)
        back([], nums)
        return res
        
        
