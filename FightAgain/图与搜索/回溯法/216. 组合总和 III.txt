# 题目

找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。

说明：

所有数字都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: k = 3, n = 7
输出: [[1,2,4]]
示例 2:

输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]


# 思路

回溯

回溯本质上是递归

递归出口：组合元素和等于目标值，通知组合元素个数等于目标值

递归参数：当前组合的所有元素的集合，以及后续元素的起始值

递归逻辑：首先判断出口是否满足，然后在起始点开始尝试向当前组合中添加元素，能够被添加进去的话，进行递归，注意参数的更新


# 代码

class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        res = []

        def back(item = [], start = 1):
            if len(item) == k and sum(item) == n:
                res.append(item)
                return
            
            for i in range(start, 10):
                if len(item) < k and sum(item) + i <= n:
                    back(item + [i], i+1)
        
        back()
        return res



