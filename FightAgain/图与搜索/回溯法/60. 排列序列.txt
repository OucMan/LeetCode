# 题目


给出集合 [1,2,3,...,n]，其所有元素共有 n! 种排列。

按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：

"123"
"132"
"213"
"231"
"312"
"321"
给定 n 和 k，返回第 k 个排列。

 
示例 1：

输入：n = 3, k = 3
输出："213"
示例 2：

输入：n = 4, k = 9
输出："2314"
示例 3：

输入：n = 3, k = 1
输出："123"
 

提示：

1 <= n <= 9
1 <= k <= n!




# 思路

回溯，全排列+计数，

回溯本质上就是递归

递归的出口：当排列的长度为k，计数器加1，计数器等于k时退出

递归的参数：排列以及下一个元素的候选集合

递归的逻辑：首先判断出口，然后依次将候选集合中的元素添加进排列中，查看是否达到退出条件，没有达到的话，那么递归，注意函数的参数处理


# 代码

class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        """
        self.res = ''
        self.c = 0
        self.flag = False

        def back(item, can):
            if len(item) == n:
                self.c += 1
            if self.c == k:
                self.res = item
                self.flag = True
                return True
            for i in can:
                if not self.flag:
                    tmp = can[::]
                    tmp.remove(i)
                    back(item + str(i), tmp)
                else:
                    return True
            return False

        back('', list(range(1, n+1)))
        return self.res


