# 题目

给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。

有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。

例如："0.1.2.201" 和 "192.168.1.1" 是 有效的 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效的 IP 地址。

 

示例 1：

输入：s = "25525511135"
输出：["255.255.11.135","255.255.111.35"]
示例 2：

输入：s = "0000"
输出：["0.0.0.0"]
示例 3：

输入：s = "1111"
输出：["1.1.1.1"]
示例 4：

输入：s = "010010"
输出：["0.10.0.10","0.100.1.0"]
示例 5：

输入：s = "101023"
输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 

提示：

0 <= s.length <= 3000
s 仅由数字组成
通过次数92,286提交次数180,797



# 思路

回溯

回溯的本质是递归

递归的出口：如果当前IP列表长度为4，并且剩余字符串长度为0，则将此IP列表添加进最后的结果集合；这里增加剪枝，即剩余字符串的长度大于最大的缺失IP字段的长度或者小于最小的缺失IP字段的长度，直接返回

递归的参数：当前的IP列表、以及剩余的字符串

递归的逻辑：首先判断出口是否满足，然后分情况讨论，分别取出剩余字符串的前1,2,3个字符，尝试组成下一个IP元素，接着调用递归函数，需要注意的就是，当取前2,3个字符时需要判断首字符是否为0，以及表示的数字在合法区间。


# 代码

class Solution(object):
    def restoreIpAddresses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        self.res = []

        def back(item, remain):
            if len(item) == 4 and remain == '':
                self.res.append('.'.join(item))
                return
            if len(remain) > ((4-len(item)) * 3) or len(remain) < (4 - len(item)):
                return
            for i in range(1, 4):
                if i == 1 and len(remain) > 0:
                    back(item + [remain[:1]], remain[1:])
                elif i >= 2 and len(remain) >= i:
                    if remain[0] != '0' and 0 < int(remain[:i]) < 256:
                        back(item + [remain[:i]], remain[i:])
        back([], s)
        return self.res


