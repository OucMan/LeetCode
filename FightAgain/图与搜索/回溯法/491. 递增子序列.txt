# 题目

给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。

示例:

输入: [4, 6, 7, 7]
输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
说明:

给定数组的长度不会超过15。
数组中的整数范围是 [-100,100]。
给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。



# 思路

回溯

回溯本质上就是递归

递归的出口：检测递归子序列的长度，大于等于2时，添加进结果集合，主机这里不用return，不然后面在此子序列的基础上得到结果元素会丢失

递归的参数：子序列集合和候选元素集合

递归的逻辑：首先判断时候满足出口条件，然后依次将候选集合中的元素增加到递增子序列中，这里需要注意的是，我们要对递增子序列进行判断，如果此时递增子序列为空，那么直接将当前元素添加进去，调用递归函数既可以，如果递增子序列不为空，则只有当当前元素大于等于递增子序列的最后一个元素时，才添加进去并继续调用递归。



# 代码

class Solution(object):
    def findSubsequences(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []

        def back(item, can):
            if len(item) >= 2:
                if item not in self.res:
                    self.res.append(item)
            for i in range(len(can)):
                if item:
                    if can[i] >= item[-1]:
                        tmp = can[i+1:]
                        back(item + [can[i]], tmp)
                else:
                    tmp = can[i+1:]
                    back(item + [can[i]], tmp)
        
        back([], nums)
        return self.res
                

