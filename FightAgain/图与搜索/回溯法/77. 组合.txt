# 题目

给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:

输入: n = 4, k = 2
输出:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

# 思路

回溯

回溯的本质是递归

递归的出口：组合中的元素个数等于k

递归的参数：当前组合的集合，下一个即将加入组合元素的起始值

递归的逻辑：首先判断组合中的元素个数是否等于k，然后逐一添加元素，并调用递归函数，此时注意参数的变更


# 代码

class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        res= []

        def back(item = [], start=1):
            if len(item) == k:
                if item not in res:
                    res.append(item)
                return
            for i in range(start, n+1):
                back(item + [i], i+1)
        
        back()
        return res
        
        
