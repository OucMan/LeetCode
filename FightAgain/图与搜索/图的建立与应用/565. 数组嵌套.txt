# 题目

索引从0开始长度为N的数组A，包含0到N - 1的所有整数。找到最大的集合S并返回其大小，其中 S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }且遵守以下的规则。

假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]... 以此类推，不断添加直到S出现重复的元素。

 

示例 1:

输入: A = [5,4,0,3,1,6,2]
输出: 4
解释: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

其中一种最长的 S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
 

提示：

N是[1, 20,000]之间的整数。
A中不含有重复的元素。
A中的元素大小在[0, N-1]之间。


# 思路

声明一个集合用来保存已经访问过的元素，循环处理每一个元素，当该元素没有出现在集合中，证明以它开头可以构建一个新链，一直找到完整的新链，然后比较长度


# 代码

class Solution(object):
    def arrayNesting(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        visited = set()
        res = 0

        for i in range(len(nums)):
            if i not in visited:
                tmp = set()
                j = i
                while j not in tmp:
                    tmp.add(j)
                    visited.add(j)
                    j = nums[j]
                res = max(res, len(tmp))

        return res 
                
                
                
