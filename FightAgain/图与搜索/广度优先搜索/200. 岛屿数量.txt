# 题目

给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

 

示例 1：

输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1
示例 2：

输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3
 

提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'


# 思路

广度优先遍历（递归）

依次处理grid中的每一个元素，条件满足时（值等于1），以该元素为起点，进入广度遍历程序。

当位置不在合法范围或者元素的值不为1，直接返回，否则将该位置的值标记为‘*’，避免重复遍历，并将本地遍历的计数器加1，接着对该位置的相邻元素调用递归程序即可。

在递归程序退出后，意味着找到了一个新的岛屿



# 代码

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        self.directions = [[1,0], [0,1], [-1,0],[0,-1]]
        self.res = 0
        rows = len(grid)
        cols = len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1':
                    self.helper(grid, rows, cols, i, j)
                    self.res += 1
        return self.res
    
    def helper(self, grid, rows, cols, i, j):
        if not 0 <= i < rows or not 0 <= j < cols or grid[i][j] != '1':
            return
        grid[i][j] = '*'
        for d in self.directions:
            n_i, n_j = i + d[0], j + d[1]
            self.helper(grid, rows, cols, n_i, n_j) 
            
