# 题目


# 思路


# 代码

给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：

每次转换只能改变一个字母。
转换后得到的单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回一个空列表。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]
示例 2:

输入:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

输出: []

解释: endWord "cog" 不在字典中，所以不存在符合要求的转换序列。


# 思路

广度优先遍历（队列+循环）

# 代码


超时了

from collections import deque

class Solution(object):
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        words = set(wordList)
        queue = deque([beginWord])
        chars = 'abcdefghijklmnopqrstuvwxyz'
        visited = set([beginWord])
        res = []
        while queue:
            path = queue.popleft()
            end = path.split(',')[-1]
            if end == endWord:
                if not res or len(path) == len(res[0]):
                    res.append(path)
                else:
                    break
            for i in range(len(end)):
                for j in chars:
                    n_w = end[:i] + j + end[i+1:]
                    n_path = path + ',' + n_w
                    if n_path not in visited and n_w in words:
                        visited.add(n_path)
                        queue.append(n_path)

        if res:
            res = [x.split(',') for x in res]
        return res
        
        
