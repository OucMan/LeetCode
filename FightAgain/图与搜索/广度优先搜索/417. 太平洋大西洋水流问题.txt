# 题目


给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。

规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。

请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。

 

提示：

输出坐标的顺序不重要
m 和 n 都小于150
 

示例：

 

给定下面的 5x5 矩阵:

  太平洋 ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * 大西洋

返回:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).


# 思路

广度优先遍历（递归），在边界开始找，找到分别可以流向太平洋和大西洋的位置，然后求交集。

# 代码

class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        self.directions = [[1,0],[-1,0],[0,1],[0,-1]]
        
        if not matrix or not matrix[0]:
            return []
        rows = len(matrix)
        cols = len(matrix[0])
        daxiyang = []
        taipingyang = []

        for i in range(rows):
            self.helper(matrix, i, 0, rows, cols, taipingyang)
            self.helper(matrix, i, cols-1, rows, cols, daxiyang)
        
        for i in range(cols):
            self.helper(matrix, 0, i, rows, cols, taipingyang)
            self.helper(matrix, rows-1, i, rows, cols, daxiyang)
        
        return [item for item in daxiyang if item in taipingyang]
    
    def helper(self, matrix, x, y, rows, cols, res):
        if [x, y] not in res:
            res.append([x, y])
        for d in self.directions:
            n_x, n_y = x + d[0], y + d[1]
            if 0 <= n_x < rows and 0 <= n_y < cols and matrix[n_x][n_y] >= matrix[x][y] and [n_x, n_y] not in res:
                self.helper(matrix, n_x, n_y, rows, cols, res)



        
