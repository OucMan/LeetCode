# 题目

班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。

给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。

 

示例 1：

输入：
[[1,1,0],
 [1,1,0],
 [0,0,1]]
输出：2 
解释：已知学生 0 和学生 1 互为朋友，他们在一个朋友圈。
第2个学生自己在一个朋友圈。所以返回 2 。
示例 2：

输入：
[[1,1,0],
 [1,1,1],
 [0,1,1]]
输出：1
解释：已知学生 0 和学生 1 互为朋友，学生 1 和学生 2 互为朋友，所以学生 0 和学生 2 也是朋友，所以他们三个在一个朋友圈，返回 1 。
 

提示：

1 <= N <= 200
M[i][i] == 1
M[i][j] == M[j][i]


# 思路

并查集

初始化：father列表用来保存每一个元素的祖先，father[i]=j表示i元素的父亲是j，初始化时，每一个人都是自己的父亲，即father[i]=i；size列表用来保存每一个团体的规模，size[i]=x表示以i为祖先的团体规模大小为x，初始化时，每一个团体只有自己一个元素，因此size[i]=1。

两个函数：

寻找某一个元素的祖先，这里使用递归，假如该元素的祖先不是他自己，那么它的祖先就是它父亲的祖先
def find(x):
    if x == father[x]:
        return x
    return find(father[x])
    
合并团体，当两个元素有关系时，那么局可以将这两个元素所在的团体合并成一个。首先判断这两个元素的祖先是不是一个，如果是一个说明，这两个元素已经在一个团体中；如果不是一个，我们将规模小的那个团体并入到规模更大的团体中，同时将规模小的祖先的父亲设置为规模大的那个祖先，然后对应的更改规模的大小。

def union(x, y):
    father_x, father_y = find(x), find(y)
    if father_x == father_y:
        return
    if size[father_x] > size[father_y]:
        father_x, father_y = father_y, father_x
    father[father_x] = father_y
    size[father_y] += size[father_x]
    
以上就是并查集的基本模板，针对不同的问题，需要修改的大部分就是合并的逻辑


# 代码

class Solution(object):
    def findCircleNum(self, M):
        """
        :type M: List[List[int]]
        :rtype: int
        """
        n = len(M)
        father = [i for i in range(n)]
        size = [1] * n
        self.count = n

        def find(x):
            if x == father[x]:
                return x
            return find(father[x])
        
        def union(x, y):
            father_x, father_y = find(x), find(y)
            if father_x == father_y:
                return
            if size[father_x] > size[father_y]:
                father_x, father_y = father_y, father_x
            father[father_x] = father_y
            size[father_y] += size[father_x]
            self.count -= 1
        
        for i in range(n):
            for j in range(i):
                if M[i][j] == 1:
                    union(i, j)
        
        return self.count
        
        
