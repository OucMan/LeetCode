# 题目

在本问题中, 树指的是一个连通且无环的无向图。

输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。

结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u < v，表示连接顶点u 和v的无向图的边。

返回一条可以删去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u < v。

示例 1：

输入: [[1,2], [1,3], [2,3]]
输出: [2,3]
解释: 给定的无向图为:
  1
 / \
2 - 3
示例 2：

输入: [[1,2], [2,3], [3,4], [1,4], [1,5]]
输出: [1,4]
解释: 给定的无向图为:
5 - 1 - 2
    |   |
    4 - 3
注意:

输入的二维数组大小在 3 到 1000。
二维数组中的整数在1到N之间，其中N是输入数组的大小。


# 思路

并查集

初始化：father列表用来保存每一个元素的祖先，father[i]=j表示i元素的父亲是j，初始化时，每一个人都是自己的父亲，即father[i]=i；size列表用来保存每一个团体的规模，size[i]=x表示以i为祖先的团体规模大小为x，初始化时，每一个团体只有自己一个元素，因此size[i]=1。

两个函数：

寻找某一个元素的祖先，这里使用递归，假如该元素的祖先不是他自己，那么它的祖先就是它父亲的祖先
def find(x):
    if x == father[x]:
        return x
    return find(father[x])
    
合并团体，当两个元素有关系时，那么局可以将这两个元素所在的团体合并成一个。首先判断这两个元素的祖先是不是一个，如果是一个说明，这两个元素已经在一个团体中，说明这两个元素之间的连接会造成环路，也就是可以被删除的链路；如果不是一个，我们将规模小的那个团体并入到规模更大的团体中，同时将规模小的祖先的父亲设置为规模大的那个祖先，然后对应的更改规模的大小。

def union(x, y):
    father_x, father_y = find(x), find(y)
    if father_x == father_y:
        self.res = [x, y]
    if size[father_x] > size[father_y]:
        father_x, father_y = father_y, father_x
    father[father_x] = father_y
    size[father_y] += size[father_x]
    
以上就是并查集的基本模板，针对不同的问题，需要修改的大部分就是合并的逻辑



# 代码

class Solution(object):
    def findRedundantConnection(self, edges):
        """
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        N = max([max(item) for item in edges])
        father = [i for i in range(N+1)]
        size = [1] * (N+1)
        self.res = None

        def find(x):
            if x == father[x]:
                return x
            return find(father[x])
        
        def union(x, y):
            father_x, father_y = find(x), find(y)
            if father_x == father_y:
                self.res = [x, y]
            if size[father_x] > size[father_y]:
                father_x, father_y = father_y, father_x
            father[father_x] = father_y
            size[father_y] += size[father_x]
        
        for e in edges:
            union(e[0], e[1])
        
        return self.res
            
