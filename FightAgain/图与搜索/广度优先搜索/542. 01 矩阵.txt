# 题目

给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。

两个相邻元素间的距离为 1 。

示例 1：

输入：
[[0,0,0],
 [0,1,0],
 [0,0,0]]

输出：
[[0,0,0],
 [0,1,0],
 [0,0,0]]
示例 2：

输入：
[[0,0,0],
 [0,1,0],
 [1,1,1]]

输出：
[[0,0,0],
 [0,1,0],
 [1,2,1]]
 
提示：

给定矩阵的元素个数不超过 10000。
给定矩阵中至少有一个元素是 0。
矩阵中的元素只在四个方向上相邻: 上、下、左、右。


# 思路

计算最短路径问题使用广度优先遍历（队列+循环）

# 代码

from collections import deque

class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        rows = len(matrix)
        cols = len(matrix[0])
        directions = [[1,0],[-1,0],[0,1],[0,-1]]
        res = [[None] * cols for _ in range(rows)]
        queue = deque([])

        for i in range(rows):
            for j in range(cols):
                if matrix[i][j] == 0:
                    queue.append([i,j])
                    res[i][j] = 0
        
        while queue:
            node = queue.popleft()
            for d in directions:
                n_i, n_j = node[0] + d[0], node[1] + d[1]
                if 0<=n_i<rows and 0<=n_j<cols and res[n_i][n_j] == None:
                    res[n_i][n_j] = res[node[0]][node[1]] + 1
                    queue.append([n_i, n_j])
        
        return res
        
