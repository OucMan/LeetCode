# 题目

给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例:

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。


# 思路

递归

digits生成的串，是由digits[0]对应的字母加上digits[1:]生成的串所得到的


# 代码

class Solution(object):

    def __init__(self):
        self.table = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}

    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        if not digits or len(digits) == 0:
            return []
        if len(digits) == 1:
            return list(self.table[digits[0]])
        
        res = []
        start = list(self.table[digits[0]])
        for i in start:
            for j in self.letterCombinations(digits[1:]):
                res.append(i + j)
        
        return res

