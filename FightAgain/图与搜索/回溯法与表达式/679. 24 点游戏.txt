# 题目

你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。

示例 1:

输入: [4, 1, 8, 7]
输出: True
解释: (8-4) * (7-1) = 24
示例 2:

输入: [1, 2, 1, 2]
输出: False
注意:

除法运算符 / 表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。
每个运算符对两个数进行运算。特别是我们不能用 - 作为一元运算符。例如，[1, 1, 1, 1] 作为输入时，表达式 -1 - 1 - 1 - 1 是不允许的。
你不能将数字连接在一起。例如，输入为 [1, 2, 1, 2] 时，不能写成 12 + 12 。


# 思路

递归，四个数取出两个数之后,做加减乘除处理之后加入到原数组中会剩下三个数,递归交给下一层去处理

递归的出口，待处理列表长度为1。

递归的参数：待处理列表

递归的逻辑：首先判断出口条件是否满足，然后取出待处理列表中的任意两个元素，经过各种运算后，填充进新的列表中，递归处理。

(1e-6：表示1乘以10的负6次方。Math.abs(x)<1e-6 其实相当于x==0。1e-6(也就是0.000001)叫做epslon，用来抵消浮点运算中因为误差造成的相等无法判断的情况。这个知识点需要掌握！)

# 代码

class Solution(object):
    def judgePoint24(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums:
            return False
        def helper(nums):
            if len(nums) == 1:
                return abs(nums[0]-24) < 1e-6
            for i in range(len(nums)):
                for j in range(i+1, len(nums)):
                    new_nums = [nums[x] for x in range(len(nums)) if x != i and x != j]
                    if helper(new_nums + [nums[i]+nums[j]]): return True
                    if helper(new_nums + [nums[i]-nums[j]]): return True
                    if helper(new_nums + [nums[j]-nums[i]]): return True
                    if helper(new_nums + [nums[i]*nums[j]]): return True
                    if nums[j] != 0 and helper(new_nums + [nums[i] * 1.0 / nums[j]]): return True
                    if nums[i] != 0 and helper(new_nums + [nums[j] * 1.0 / nums[i]]): return True
            return False
        
        return helper(nums)


