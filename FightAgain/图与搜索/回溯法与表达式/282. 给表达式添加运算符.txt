# 题目

给定一个仅包含数字 0-9 的字符串和一个目标值，在数字之间添加二元运算符（不是一元）+、- 或 * ，返回所有能够得到目标值的表达式。

示例 1:

输入: num = "123", target = 6
输出: ["1+2+3", "1*2*3"] 
示例 2:

输入: num = "232", target = 8
输出: ["2*3+2", "2+3*2"]
示例 3:

输入: num = "105", target = 5
输出: ["1*0+5","10-5"]
示例 4:

输入: num = "00", target = 0
输出: ["0+0", "0-0", "0*0"]
示例 5:

输入: num = "3456237490", target = 9191
输出: []


# 思路

回溯

回溯的本质就是递归

递归的出口：表达式的计算结果等于目标值，并且待处理的字符串长度为0，将该表达式添加进结果集合

递归的参数：当前表达式，当前表达式代表的数值，剩余待处理的字符串，以及当前表达式中的最后一项数值（这是为了计算乘法的）

递归的逻辑：首先计算出口条件是否满足；接着按照长度在待处理字符串中取各种长度的数字，然后依次添加三种运算符，调用递归函数，注意参数的更新。对于乘法，处理当前元素之前的表达式和为ans=x+prev，当添加进当前元素后ans_new = x + prev * a，即ans_new = ans + (a-1) * prev


# 代码

class Solution(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        self.res = []

        def back(item, can, ans, prev):
            if ans == target and len(can) == 0:
                self.res.append(item)
                return
            for i in range(1, len(can)+1):
                if i > 1 and can[0] == '0':
                    continue
                a = int(can[:i])
                if item == '':
                    back(item + can[:i], can[i:], a, a)
                else:
                    back(item + '+' + can[:i], can[i:], ans + a, a)
                    back(item + '-' + can[:i], can[i:], ans - a, -a)
                    back(item + '*' + can[:i], can[i:], ans + (a-1)*prev, a*prev)
        
        back('', num, 0, 0)

        return self.res
        
        
