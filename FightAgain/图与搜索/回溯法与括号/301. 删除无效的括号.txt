# 题目

删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。

说明: 输入可能包含了除 ( 和 ) 以外的字符。

示例 1:

输入: "()())()"
输出: ["()()()", "(())()"]
示例 2:

输入: "(a)())()"
输出: ["(a)()()", "(a())()"]
示例 3:

输入: ")("
输出: [""]



# 思路

两个辅助函数：检测字符串是否合法，获得需要删除的左右括号数量

回溯

回溯本质上就是递归

递归的出口：需要删除的左右括号为0， 同时字符串是合法的

递归的参数：需要删除的左右括号的个数，待处理的字符串，以及本轮处理的起始位置

递归的逻辑：首先检测出口条件，然后对于待处理字符串，从起始位置进行递归处理，注意剪枝


# 代码

class Solution(object):
    def removeInvalidParentheses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        left, right = self.get_remove_num(s)
        self.res = []

        def back(ss, l, r, start):
            if l == 0 and r == 0 and self.is_vaild(ss):
                self.res.append(ss)
            for i in range(start, len(ss)):
                if i > 0 and ss[i-1] == ss[i]:
                    continue
                if ss[i] == '(' and left > 0:
                    back(ss[:i] + ss[i+1:], l-1, r, i)
                elif ss[i] == ')' and right > 0:
                    back(ss[:i] + ss[i+1:], l, r-1, i)
        
        back(s, left, right, 0)
        return self.res

    def get_remove_num(self, s):
        left, right = 0, 0
        for c in s:
            if c == '(':
                left += 1
            elif c == ')':
                if left > 0:
                    left -= 1
                else:
                    right += 1
        return left, right

    def is_vaild(self, s):
        cnt = 0
        for c in s:
            if c == '(':
                cnt += 1
            elif c == ')':
                cnt -= 1
            if cnt < 0:
                return False
        return cnt == 0
            
