# 题目

数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。

示例：

输入：n = 3
输出：[
       "((()))",
       "(()())",
       "(())()",
       "()(())",
       "()()()"
     ]


# 思路

回溯

回溯的本质是递归

递归的出口：产生的字符串长度为n*2

递归的参数：当前的括号字符串，左括号个数和右括号个数

递归的逻辑：首先检测出口是否满足；当左括号小于n的时候，递归调用函数，当右括号小于左括号时，递归调用函数。


# 代码

class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        
        self.res = []
        def back(item, left, right):
            if len(item) == n * 2:
                self.res.append(item)
                return
            if left < n:
                back(item +'(', left+1, right)
            if left > right:
                back(item +')', left, right+1)
        
        back('', 0, 0)
        return self.res
        
        
