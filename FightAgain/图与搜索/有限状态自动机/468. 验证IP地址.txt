# 题目

编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址。

如果是有效的 IPv4 地址，返回 "IPv4" ；
如果是有效的 IPv6 地址，返回 "IPv6" ；
如果不是上述类型的 IP 地址，返回 "Neither" 。
IPv4 地址由十进制数和点来表示，每个地址包含 4 个十进制数，其范围为 0 - 255， 用(".")分割。比如，172.16.254.1；

同时，IPv4 地址内的数不会以 0 开头。比如，地址 172.16.254.01 是不合法的。

IPv6 地址由 8 组 16 进制的数字来表示，每组表示 16 比特。这些组数字通过 (":")分割。比如,  2001:0db8:85a3:0000:0000:8a2e:0370:7334 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， 2001:db8:85a3:0:0:8A2E:0370:7334 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。

然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。 比如， 2001:0db8:85a3::8A2E:0370:7334 是无效的 IPv6 地址。

同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如， 02001:0db8:85a3:0000:0000:8a2e:0370:7334 是无效的。


示例 1：

输入：IP = "172.16.254.1"
输出："IPv4"
解释：有效的 IPv4 地址，返回 "IPv4"
示例 2：

输入：IP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
输出："IPv6"
解释：有效的 IPv6 地址，返回 "IPv6"
示例 3：

输入：IP = "256.256.256.256"
输出："Neither"
解释：既不是 IPv4 地址，又不是 IPv6 地址
示例 4：

输入：IP = "2001:0db8:85a3:0:0:8A2E:0370:7334:"
输出："Neither"
示例 5：

输入：IP = "1e1.4.5.6"
输出："Neither"
 
提示：

IP 仅由英文字母，数字，字符 '.' 和 ':' 组成。



# 思路

首先按照分隔符将v4和v6分开

v4的判断：首先按照.分割字符串，查看是否存在空串，查看长度是否为4，再查看每一段是否都是由数字组成，并判断每一段的第一位是否为0，假如第一位为0，但是此段的长度大于1，则就是不合法；然后判断非0开头的段对应的数字是否在0到255之间；

v6的判断：首先按照：分割字符串，查看是否存在空串，查看长度是否为8，再查看每一段的长度是否小于5，然后判断每一段的元素是否在‘123456789abcdefABCDEF’

# 代码

class Solution(object):
    def validIPAddress(self, IP):
        """
        :type IP: str
        :rtype: str
        """
        if '.' in IP and ':' not in IP:
            return self.check_ipv4(IP)
        elif '.' not in IP and ':' in IP:
            return self.check_ipv6(IP)
        return 'Neither'
    
    def check_ipv4(self, ip):
        ip = ip.split('.')
        if '' in ip:
            return 'Neither'
        if len(ip) != 4:
            return 'Neither'
        for i in ip:
            if not i.isdigit():
                return 'Neither'
            if len(i) > 1 and i[0] == '0':
                return 'Neither'
            if not 0 <= int(i) <= 255:
                return 'Neither'
        return 'IPv4'
    
    def check_ipv6(self, ip):
        ip = ip.split(':')
        if '' in ip:
            return 'Neither'
        if len(ip) != 8:
            return 'Neither'
        for i in ip:
            if len(i) > 4:
                return 'Neither'
            for j in i:
                if j not in '0123456789abcdefABCDEF':
                    return 'Neither'
        return 'IPv6'

