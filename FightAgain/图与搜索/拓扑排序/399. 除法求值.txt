# 题目

给出方程式 A / B = k, 其中 A 和 B 均为用字符串表示的变量， k 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 -1.0。

输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。

 

示例 1：

输入：equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]
解释：
给定：a / b = 2.0, b / c = 3.0
问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
返回：[6.0, 0.5, -1.0, 1.0, -1.0 ]
示例 2：

输入：equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
输出：[3.75000,0.40000,5.00000,0.20000]
示例 3：

输入：equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
输出：[0.50000,2.00000,-1.00000,-1.00000]
 

提示：

1 <= equations.length <= 20
equations[i].length == 2
1 <= equations[i][0].length, equations[i][1].length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= queries[i][0].length, queries[i][1].length <= 5
equations[i][0], equations[i][1], queries[i][0], queries[i][1] 由小写英文字母与数字组成



# 思路

看成图论来做，a/b = 2 ->a到b的距离是2,b到a的距离是1/2，所以：
1）hash表构造一个类似{'a':{'b':2}}的字典，表示a到b的距离是2
2）使用floyd更新字典,a->c = a->b * b->c
3）从字典中查找对应的距离 如果不存在这个点返回-1

参见大神https://leetcode-cn.com/problems/evaluate-division/solution/python-floydhashbiao-by-cool_ya-han/

# 代码

class Solution(object):
    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        point = set()
        adj = {}

        for i, e in enumerate(equations):
            if e[0] not in adj:
                adj[e[0]] = {e[1]: values[i]}
            else:
                adj[e[0]][e[1]] = values[i]
            if e[1] not in adj:
                adj[e[1]] = {e[0]: 1/values[i]}
            else:
                adj[e[1]][e[0]] = 1/values[i]

            point.add(e[0])
            point.add(e[1])
        
        # floyd
        for k in point:
            for i in point:
                for j in point:
                    if k in adj[i] and j in adj[k]:
                        adj[i][j] = adj[i][k] * adj[k][j]
        
        res = []
        for q in queries:
            if q[0] in adj and q[1] in adj[q[0]]:
                res.append(adj[q[0]][q[1]])
            else:
                res.append(-1)
        
        return res

