# 题目

你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]

给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？

 

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。
 

提示：

输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵 。详情请参见图的表示法。
你可以假定输入的先决条件中没有重复的边。
1 <= numCourses <= 10^5


# 思路

通过拓扑排序判断此课程安排图是否是有向无环图(DAG) 。

首先通过课程前置条件列表prerequisites得到课程安排图的邻接表和入度表，然后使用广度优先遍历（队列+循环）进行判断

1、借助一个队列 queue，将所有入度为0的节点入队。
2、当queue非空时，依次将队首节点出队，在课程安排图中删除此节点pre：
  并不是真正从邻接表中删除此节点pre，而是将此节点对应所有邻接节点cur的入度−1，即indegrees[cur] -= 1。
  当入度-1后邻接节点cur的入度为0，说明cur所有的前驱节点已经被 “删除”，此时将cur入队。
3、在每次pre出队时，执行numCourses--；
4、若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为0。因此，拓扑排序出队次数等于课程个数，返回 numCourses == 0判断课程是否可以成功安排。




# 代码

from collections import deque

class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        # 入度列表
        indgree = [0 for _ in range(numCourses)]
        # 邻接列表
        adj = [[] for _ in range(numCourses)]

        queue = deque()

        for cur, pre in prerequisites:
            indgree[cur] += 1
            adj[pre].append(cur)
        
        for i in range(len(indgree)):
            if indgree[i] == 0:
                queue.append(i)
        
        while queue:
            pre = queue.popleft()
            numCourses -= 1
            for cur in adj[pre]:
                indgree[cur] -= 1
                if indgree[cur] == 0:
                    queue.append(cur)
        
        return numCourses == 0
        
        
