# 题目

给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

 
示例 1：

输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
示例 2：

输入：nums = [0,1,0,3,2,3]
输出：4
示例 3：

输入：nums = [7,7,7,7,7,7,7]
输出：1
 

提示：

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

进阶：

你可以设计时间复杂度为 O(n2) 的解决方案吗？
你能将算法的时间复杂度降低到 O(n log(n)) 吗?


# 思路

思路1：动态规划

思路2：二分查找，声明一个列表保存递增序列，依次遍历数组，如果列表为空或者列表最后一个元素小于当前元素，则将当前元素添加到列表中；如果当前元素小于等于列表最后一个元素，则通过二分查找找到该元素应该在列表中插入的位置，替换元素。最后获得列表的长度。

# 代码

思路1

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        dp = [1] * len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)

思路2

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if len(nums) <= 1:
            return len(nums)
        res = [nums[0]]
        for i in range(1, len(nums)):
            if nums[i] > res[-1]:
                res.append(nums[i])
            else:
                p = self.get_position(res, nums[i])
                res[p] = nums[i]
        return len(res)
    
    def get_position(self, res, n):
        l, r = 0, len(res) - 1
        while l <= r:
            mid = l + (r-l)//2
            if res[mid] == n:
                return mid
            elif res[mid] > n:
                r = mid - 1
            else:
                l = mid + 1
        return l
        
        
