# 题目


# 思路

数组长度分别是m,n

首先奇偶问题，第(m+n+1)/2个数，和(m+n+2)/2个数，然后求其平均值，因为m+n为奇数的话，那么其实(m+n+1)/2和(m+n+2)/2的值相等。

然后复杂度为O(log(m+n))，因此想到二分，这里使用了递归分别找到两个数组合并后的第(m+n+1)/2个数，和(m+n+2)/2个数。

递归函数的参数：两个数组nums1, num2，以及各自的起点指针i,j，还有目标值的位置k，初始时i=j=0, k = (m+n+1)/2 或(m+n+2)/2
递归的出口：当k=1时候，相当于求最小值，我们只要比较nums1和nums2的起始位置i和j上的数字就可以了；当某一个数组的起始位置大于等于其数组长度时，说明其所有数字均已经被淘汰了，相当于一个空数组了，那么实际上就变成了在另一个数组中找数字，直接就可以找出来了。
递归的逻辑：首先判断出口是否满足，然后取两个数组中的第k/2个元素（midVal1和midVal2）进行比较，如果midVal1 < midVal2，则说明数组1中的前k/2个元素不可能成为第k个元素的候选，所以将数组1中的前k/2个元素去掉，作为新数组和数组2求第k-k/2小的元素，因为我们把前k/2个元素去掉了，所以相应的k值也应该减少k/2。midVal1 > midVal2的情况亦然。




见大神：https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/zong-he-bai-jia-ti-jie-zong-jie-zui-qing-xi-yi-don/

# 代码

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        m = len(nums1)
        n = len(nums2)

        left = (m + n + 1) // 2
        right = (m + n + 2) // 2

        return (self.findKth(nums1, 0, nums2, 0, left) + self.findKth(nums1, 0, nums2, 0, right)) / 2.0
    
    def findKth(self, nums1, i, nums2, j, k):
        if i >= len(nums1):
            return nums2[j + k - 1]
        if j >= len(nums2):
            return nums1[i + k - 1]
        if k == 1:
            return min(nums1[i], nums2[j])
        
        mid_val1 = nums1[i + k // 2 - 1] if (i + k // 2 - 1) < len(nums1) else float('inf')
        mid_val2 = nums2[j + k // 2 - 1] if (j + k // 2 - 1) < len(nums2) else float('inf')

        if mid_val1 < mid_val2:
            return self.findKth(nums1, i + k//2, nums2, j, k - k//2)
        else:
            return self.findKth(nums1, i, nums2, j + k//2, k - k//2)
            
            
