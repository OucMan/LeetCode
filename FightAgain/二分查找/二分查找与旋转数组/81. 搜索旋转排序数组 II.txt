# 题目

假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例 1:

输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true
示例 2:

输入: nums = [2,5,6,0,0,1,2], target = 3
输出: false
进阶:

这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。
这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？


# 思路

与33. 搜索旋转排序数组不同的是：

当左端点和右端点相等时，无法判断mid在左半边有序数组还是右半边有序数组，所以只需要一直pop直到左端点和右端点不相等就可以

# 代码

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        while len(nums) > 1 and nums[0] == nums[-1]:
            nums.pop()

        p = self.get_point(nums)
        res = self.get_target(nums[:p], target)
        if res != -1:
            return True
        else:
            res = self.get_target(nums[p:], target)
            if res == -1:
                return False
            else:
                return True


    def get_point(self, nums):
        l, r = 0, len(nums) - 1
        while l < r:
            mid = l + (r-l)//2
            if nums[mid] == nums[r]:
                r = r - 1
            elif nums[mid] < nums[r]:
                r = mid
            else:
                l = mid + 1
        return r
    
    def get_target(self, nums, target):
        if len(nums) == 0:
            return -1
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = l + (r-l)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                l = mid + 1
            else:
                r = mid - 1
        return -1
        
        




