# 题目

编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。

示例 1：
输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 3
输出：true

示例 2：
输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]], target = 13
输出：false


# 思路

将二维数组看成一维数组，只要注意好坐标的转换就好，二分查找

# 代码

class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        m, n = len(matrix), len(matrix[0])
        if m * n == 0:
            return False
        
        l, r = 0, m * n -1
        while l <= r:
            mid = l + (r - l) // 2
            ro, co = mid // n, mid % n
            if matrix[ro][co] == target:
                return True
            elif matrix[ro][co] > target:
                r = mid - 1
            else:
                l = mid + 1
        
        return False
        
        
        

