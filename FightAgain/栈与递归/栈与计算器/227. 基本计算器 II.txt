# 题目

实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。

示例 1:

输入: "3+2*2"
输出: 7
示例 2:

输入: " 3/2 "
输出: 1
示例 3:

输入: " 3+5 / 2 "
输出: 5
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。



# 思路

以此遍历字符串，我们首先需要取出每一个参与运算的数字，我们首先为第一个数字加一个默认符号+，当当前字符是数字，则直接累积计算数字元素，如果当前为字符，则说明当前的数字已经遍历完成，我们则需要根据根据符号将数字入栈。当符号为+-时，我们直接将当前数字的正负入栈就好，当当前符号是*、，则需要取出栈顶的数字，与当前数字运算完再入栈，最后计算栈中所有元素的和。


# 代码

class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        sign = '+'
        num = 0
        stack = []
        for i in range(len(s)):
            if s[i].isdigit():
                num = num * 10 + int(s[i])
            if s[i] != ' ' and not s[i].isdigit() or i == len(s)-1:
                if sign == '+':
                    stack.append(num)
                elif sign == '-':
                    stack.append(-1 * num)
                elif sign == '*':
                    stack[-1] = stack[-1] * num
                elif sign == '/':
                    stack[-1] = int(stack[-1] / float(num))
                num = 0
                sign = s[i]
        return sum(stack)


