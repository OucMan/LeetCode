# 题目

实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格  。

示例 1:

输入: "1 + 1"
输出: 2
示例 2:

输入: " 2-1 + 2 "
输出: 3
示例 3:

输入: "(1+(4+5+2)-3)+(6+8)"
输出: 23
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。


# 思路

四则运算，带括号的题目，通用的解法是，首先利用栈讲中缀表达式转变为后缀表达式，然后利用栈计算后缀表达式

第一步，中缀转变为后缀

符号入栈，假如当前处理的是数字，则直接添加到结果列表中。当前处理的符号优先级大于栈顶符号，直接将当前符号入栈，当前处理的符号优先级小于等于当前符号，则循环弹出栈顶，知道栈顶元素优先级小于当前元素，或者栈为空，然后将当前符号入栈，假如当前处理元素是左括号，直接入栈，如果是右括号，玄幻弹出栈顶元素，直到遇到左括号，并弹出左括号。

第二步，后缀求结果

数字入栈，入到符号，则弹出栈顶的头两个元素，计算完将结果入栈，最终栈中只有一个数字，那就是最终结果。

# 代码

class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        s = s.strip()
        s = self.str_to_mid(s)
        s = self.mid_to_pro(s)
        return self.pro_to_res(s)

    def str_to_mid(self, s):
        res = []
        num = ''
        for i in range(len(s)):
            if s[i] == ' ':
                continue
            if s[i].isdigit():
                num = num + s[i]
                if i == len(s) - 1:
                    res.append(num)
            else:
                if num:
                    res.append(num)
                    num = ''
                res.append(s[i])
        return res

    def mid_to_pro(self, s):
        res = []
        stack = []
        pri = {'+': 0, '-': 0, '*': 1, '/': 1}
        for i in range(len(s)):
            if s[i].isdigit():
                res.append(s[i])
            if s[i] == '(':
                stack.append(s[i])
            elif s[i] == ')':
                while stack[-1] != '(':
                    res.append(stack.pop())
                stack.pop()
            elif s[i] in pri:
                while stack and stack[-1] in pri and pri[stack[-1]] >= pri[s[i]]:
                    res.append(stack.pop())
                stack.append(s[i])
        while stack:
            res.append(stack.pop())
        return res


    def pro_to_res(self, s):
        stack = []
        for item in s:
            if item.isdigit():
                stack.append(int(item))
            else:
                a = stack.pop()
                b = stack.pop()
                if item == '+':
                    stack.append(a + b)
                elif item == '-':
                    stack.append(b - a)
                elif item == '*':
                    stack.append(b * a)
                elif item == '/':
                    stack.append(int(b / float(a)))
        return stack[0]


