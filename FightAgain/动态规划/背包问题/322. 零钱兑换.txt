# 题目

给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

你可以认为每种硬币的数量是无限的。

示例 1：

输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1
示例 2：

输入：coins = [2], amount = 3
输出：-1
示例 3：

输入：coins = [1], amount = 0
输出：0
示例 4：

输入：coins = [1], amount = 1
输出：1
示例 5：

输入：coins = [1], amount = 2
输出：2
 

提示：

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104



# 思路

完全背包问题

dp[i][j]表示当遇到第i种硬币时，金额数量为j时的放置方法数量
dp[i][j] = min(dp[i][j-coins[i]] + 1, dp[i-1][j])，其中dp[i][j-coins[i]] + 1为放置coins[i]，dp[i-1][j]为不放置coins[i]
可以看到
dp[i][j]只和dp[i][j-coins[i]]和dp[i-1][j]相关，因此可以压缩
dp[j] = min(dp[j-coins[i]]+1, dp[j])

模板

遍历硬币：
  遍历金额（正序）：
    dp[j] = min(dp[j-coins[i]]+1, dp[j]) # 转化函数
返回结果

dp[j]和dp[j-coins[i]]都是一个轮次的，因此正序。

# 代码

class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        n = len(coins)
        dp = [float('inf')] * (amount+1)
        dp[0] = 0

        for i in range(n):
            for j in range(coins[i], amount+1):
                dp[j] = min(dp[j], dp[j-coins[i]] + 1)
        return dp[-1] if dp[-1] != float('inf') else -1
        
        
