# 题目

给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。

返回可以使最终数组和为目标数 S 的所有添加符号的方法数。

 

示例：

输入：nums: [1, 1, 1, 1, 1], S: 3
输出：5
解释：

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

一共有5种方法让最终目标和为3。
 

提示：

数组非空，且长度不会超过 20 。
初始的数组的和不会超过 1000 。
保证返回的最终结果能被 32 位整数存下。



# 思路

这里有一个转化

s为数组总和，S为目标值，其中有加有减。首先s要是小于S时，肯定没有符合要求的清空，将s+S，这时候会消掉前面是减号的元素，剩下一对一对的元素，因此两者的和可以被2整除。我们将s+S的和除以2，便得到了target，即(s+S)/2 = target，S = s-2*target，因此原问题就化解为列表中存在元素之和等于target即可，剩下的问题就是01背包问题了

初始化
dp = [0] * (S+1)
dp[0] = 1 # 和为0的，有一种情况，就没有元素
转化函数
dp[i] = dp[i] + dp[i-n]
返回值
dp[-1]


# 代码

class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        s = sum(nums)
        if s < S or (s + S) % 2 != 0:
            return 0
        S = (s + S) / 2
        dp = [0] * (S+1)
        dp[0] = 1
        for n in nums:
            for i in range(S, n-1, -1):
                dp[i] = dp[i] + dp[i-n]
        return dp[-1]
        
        
        
