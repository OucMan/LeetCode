# 题目

给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。

示例:

nums = [1, 2, 3]
target = 4

所有可能的组合为：
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

请注意，顺序不同的序列被视作不同的组合。

因此输出为 7。
进阶：
如果给定的数组中含有负数会怎么样？
问题会产生什么变化？
我们需要在题目中添加什么限制来允许负数的出现？

致谢：
特别感谢 @pbrother 添加此问题并创建所有测试用例。


# 思路

dp[i]表示集合中元素等于i的可能，因此这次外层循环是目标值，内存循环为元素
初始化
dp = [0] * (target+1)
dp[0] = 1 # 和为0的情况是没有元素参与
转换函数
dp[i] = dp[i] + dp[i-n]  n属于nums
返回值
dp[-1]



# 代码

class Solution(object):
    def combinationSum4(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(target+1):
            for n in nums:
                if i >= n:
                   dp[i] = dp[i] + dp[i-n] 
        return dp[-1]
        
        
