# 题目

给定一个整数矩阵，找出最长递增路径的长度。

对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。

示例 1:

输入: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
输出: 4 
解释: 最长递增路径为 [1, 2, 6, 9]。
示例 2:

输入: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
输出: 4 
解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。


# 思路

记忆化深度优先搜索

首先定义一个字典用来保存从某一点开始的最长递增长度，然后再去深度递归



# 代码

class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        self.dirs = [(-1, 0), (1, 0), (0, 1), (0, -1)]
        self.dic = {}

        if not matrix:
            return 0

        rows, cols = len(matrix), len(matrix[0])
        
        def dfs(row, col):
            best = 1
            if (row, col) in self.dic:
                return self.dic[(row, col)]
            for x, y in self.dirs:
                n_r, n_c = row + x, col + y
                if 0 <= n_r < rows and 0 <= n_c < cols and matrix[n_r][n_c] > matrix[row][col]:
                    best = max(best, dfs(n_r, n_c) + 1)
            self.dic[(row, col)] = best
            return best
            
        res = 0
        for i in range(rows):
            for j in range(cols):
                res = max(res, dfs(i, j))
        return res


