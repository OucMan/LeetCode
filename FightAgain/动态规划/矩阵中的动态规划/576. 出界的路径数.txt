# 题目

给定一个 m × n 的网格和一个球。球的起始坐标为 (i,j) ，你可以将球移到相邻的单元格内，或者往上、下、左、右四个方向上移动使球穿过网格边界。但是，你最多可以移动 N 次。找出可以将球移出边界的路径数量。答案可能非常大，返回 结果 mod 109 + 7 的值。

 

示例 1：

输入: m = 2, n = 2, N = 2, i = 0, j = 0
输出: 6

说明:

球一旦出界，就不能再被移动回网格内。
网格的长度和高度在 [1,50] 的范围内。
N 在 [0,50] 的范围内。


# 思路

动态规划

dp[k][r][c]为位置为(r,c)的球最多移动k次，能到达边界的次数
则转换函数为dp[k][r][c] = dp[k-1][r-1][c] + dp[k-1][r+1][c] + dp[k-1][r][c-1] + dp[k-1][r][c+1]

初始化

首先扩展球场，即四周加上一道边，这些边对上的值标记为1，即不移动就是出界1次
for r in range(m+2):
    dp[0][r][0] = 1
    dp[0][r][n+1] = 1
for c in range(n+2):
    dp[0][0][c] = 1
    dp[0][m+1][c] = 1

返回值，查看从(i,j)位置开始，移动次数从1到N的累加和



# 代码

class Solution(object):
    def findPaths(self, m, n, N, i, j):
        """
        :type m: int
        :type n: int
        :type N: int
        :type i: int
        :type j: int
        :rtype: int
        """
        dp = [[[0] * (n + 2) for _ in range(m+2)] for _ in range(N+1)]
        for r in range(m+2):
            dp[0][r][0] = 1
            dp[0][r][n+1] = 1
        for c in range(n+2):
            dp[0][0][c] = 1
            dp[0][m+1][c] = 1
        
        for k in range(1, N+1):
            for r in range(1, m+1):
                for c in range(1, n+1):
                    dp[k][r][c] = dp[k-1][r-1][c] + dp[k-1][r+1][c] + dp[k-1][r][c-1] + dp[k-1][r][c+1]
        
        res = 0
        for k in range(1, N+1):
            res += dp[k][i+1][j+1]
        return res % (10**9 + 7)

