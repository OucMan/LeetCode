# 题目

在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。

示例 1：
输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
输出：4


# 思路

动态规划

dp[i][j]表示以matrix[i][j]为右下角的顶点的可以组成的最大正方形的边长。
如果matrix[i][j]等于0，dp[i][j]等于0。
如果matrix[i][j]等于1，那么dp[i][j]就等于左边元素为右下角顶点的正方形边长，上边元素为右下角顶点的正方形边长，上对角线元素为右下角顶点的正方形边长，这三个边长的最小值再加1
即dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1

dp[i][j]初始化就是matrix

# 代码


class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        rows, cols = len(matrix), len(matrix[0])
        if rows * cols == 0:
            return 0
        dp = []
        res = 0
        for i in range(rows):
            tmp = []
            for j in range(cols):
                res = max(res, int(matrix[i][j]))
                tmp.append(int(matrix[i][j]))
            dp.append(tmp)

        for i in range(1, rows):
            for j in range(1, cols):
                if matrix[i][j] == '1':
                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
                    res = max(res, dp[i][j])
        return res * res
            

