# 题目

给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false


# 思路

动态规划
dp[i]表示s[:i]能够拆分为字典中的若干单词，

初始化
dp大小为len(s)+1，除dp[0]为True，其余为False

双层遍历，外层为遍历字符串，内层为遍历字典，假如已经遍历的字符串的长度大于等于当前遍历的单词的长度时，进行赋值处理。


# 代码

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        n = len(s) + 1
        dp = [False] * n
        dp[0] = True
        for i in range(1, n):
            for w in wordDict:
                if i >= len(w) and w == s[i-len(w):i]:
                    dp[i] = dp[i] or dp[i-len(w)]
        return dp[-1]

