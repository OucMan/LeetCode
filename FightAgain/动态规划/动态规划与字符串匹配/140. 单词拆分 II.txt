# 题目

给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：

输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：

输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]
通过次数39,929提交次数90,027



# 思路

回溯，但是直接使用回溯会超时，因为存在大量无效的计算，因此引入一个备忘录flag，其中flag[i]表示s[i:]是可拆分的。

回溯的本质是递归

递归的出口，当前遍历的索引超过字符串的最大索引，将本次结果放入到最终列表中；

递归的参数，当前遍历的索引，以及可拆分单词组成的列表；

递归的逻辑，首先记录一下结果集合的长度，然后判断出口条件是否满足，接着继续向后遍历字符串，如果从起点开始到当前索引组成的单词再字典中，并且当前索引之后是可拆分的，那么继续递归处理。


# 代码

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        n = len(s) + 1
        flag = [1] * n
        res = []

        def helper(start, tmp):
            l = len(res)
            if start == len(s):
                res.append(' '.join(tmp))
                return
            for i in range(start, n):
                if flag[i] and s[start:i] in wordDict:
                    helper(i, tmp + [s[start:i]])
            flag[start] = 1 if len(res) > l else 0
        
        helper(0, [])
        return res
