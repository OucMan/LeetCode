# 题目

给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回符合要求的最少分割次数。

示例:

输入: "aab"
输出: 1
解释: 进行一次分割就可将 s 分割成 ["aa","b"] 这样两个回文子串。


# 思路

dp[i]表示前缀子串 s[:i+1] 分割成若干个回文子串所需要最小分割次数。因此题目返回dp[n-1]，其中n = len(s)

初始dp[0] = 0，第一个元素本身就是回文串，不用分割

后面的，则需要枚举切分的位置，即如果 s[0:i] 本身不是一个回文串，就尝试分割，枚举分割的边界 j。

如果 s[j + 1, i] 不是回文串，尝试下一个分割边界。

如果 s[j + 1, i] 是回文串，则 dp[i] 就是在 dp[j] 的基础上多一个分割。

于是枚举 j 所有可能的位置，取所有 dp[j] 中最小的再加 1 ，就是 dp[i]。

dp[i] = min([dp[j] + 1 for j in range(i) if s[j + 1, i] 是回文])


# 代码

class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        dp = [i for i in range(n)]
        for i in range(1, n):
            if s[:i+1] == s[:i+1][::-1]:
                dp[i] = 0
                continue
            dp[i] = min([dp[j]+1 for j in range(i) if s[j+1:i+1] == s[j+1:i+1][::-1]])
        return dp[-1]
        
        
        
