# 题目

给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。


示例：

输入: "sea", "eat"
输出: 2
解释: 第一步将"sea"变为"ea"，第二步将"eat"变为"ea"
 

提示：

给定单词的长度不超过500。
给定单词中的字符只含有小写字母。


# 思路

动态规划
dp[i][j]表示word1中前i个字符和word2中前j个字符通过删除字符串得到的最长相等串的长度。

当word1[i]=word2[j]时，dp[i][j] = dp[i-1][j-1]+1，当word1[i]！=word2[j]时，dp[i][j]=max(dp[i-1][j],dp[i][j-1])

最终题目返回的结果就是两个单词的长度和减去2*dp[-1][-1]

# 代码

class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        m, n = len(word1), len(word2)
        dp = [[0] * (n+1) for _ in range(m+1)]
        for i in range(1, m+1):
            for j in range(1, n+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        return m + n - 2 * dp[-1][-1]
        
        
