# 题目

给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。


# 思路

动态规划：当i是偶数的时候，其包含的1的个数等于i//2中包含的1的个数（相当于左移），当i时奇数的时候，其包含的1的个数等于i//2中包含的1的个数 再加 1，因此得到元素之间的关系

F(i) = F(i//2), i为偶数
F(i) = F(i//2) + 1, i为奇数

边界为F(0) = 0, 返回值为F(i)

# 代码

class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
        res = [0]
        for i in range(1, num+1):
            if i % 2 == 0:
                res.append(res[i//2])
            else:
                res.append(res[i//2]+1)
        return res


