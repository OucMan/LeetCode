# 题目

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

# 思路

动态规划

N阶楼梯有F(N)种办法，假如第一次走一个台阶，那么剩余的N-1个台阶有F(N-1)种走法，假如第一次走两个台阶，那么剩余的N-2个台阶有F(N-2)种走法，因此F(N) = F(N-1) + F(N-2)

边界： F(0)=0, F(1)=1, F(2)=2
元素之间的关系：F(N) = F(N-1) + F(N-2) N > 2
返回值：F(N)

# 代码

class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n <= 2:
            return n
        
        a, b = 1, 2
        while n > 2:
            a, b = b, a + b
            n -= 1
        return b
        
        
