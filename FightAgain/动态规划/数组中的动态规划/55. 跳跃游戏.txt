# 题目

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。


# 思路

动态规划

res = [False] * len(nums)， res标识每一个节点是否能够到达最后一个节点，因此最后返回res[0]
声明一个变量标识边界index（只要能到达该边界，就可以判断能够到达最后元素），初始为最后一个元素的索引，len(nums)-1

倒叙遍历，只要该点能够到达边界index，更新res和index，能够到达的判断标准是距离

# 代码

class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums or len(nums) <= 1:
            return True
        n = len(nums)
        res = [False] * n
        res[-1] = True
        index = n-1
        for i in range(n-2, -1, -1):
            if nums[i] >= index - i:
                res[i] = True
                index = i
        return res[0]

