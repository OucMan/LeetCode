# 题目

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。


# 思路

初始化，初始遍历索引index=0,最远的遍历距离cur_end为nums[0],假如cur_end>=len(nums)-1，即可以在0点一步到达最后，返回res=1

否则，从index=1开始向后遍历，到end位置看作是一轮，在当前轮的遍历过程中，记录下一轮的能够到达的最远距离，如果大于len(nums)-1，则返回结果，否则继续进行下一轮遍历

# 代码

class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) <= 1:
            return 0
        n = len(nums)
        cur_end = nums[0]
        next_end = nums[0]
        res = 1
        if cur_end >= n - 1:
            return res
        
        for i in range(1, n):
            next_end = max(next_end, i + nums[i])
            if i == cur_end:
                if cur_end < n - 1:
                    res += 1
                    cur_end = next_end
                    if next_end >= n-1:
                        return res
                else:
                    return res
                
        
