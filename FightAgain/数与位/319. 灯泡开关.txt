# 题目

初始时有 n 个灯泡关闭。

第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。

第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。

找出 n 轮后有多少个亮着的灯泡。


# 思路

对于每一个灯泡，只要其所在的索引拥有的因子数量为奇数，那边最后就是亮着呢，而因子数量为偶数，最后就是关闭的。

举例，序号为4的灯泡，其因子为1,2,4，那就说明在第一、二、四轮都会进行操作，初始化为关闭，经过三次操作，最终为开启

所以，本题就是求[1,n]中哪些数具有奇数个因子。下面讲解如何判断一个数是否有奇数个因子：

假如数x拥有因数m，那么x/m同样也会是x的因数，当m与x/m不相等时，它是成对出现的，当出现奇数个因子时，说明存在m与x/m相等，即x是完全平方数，因此我们可以通过判断x是否为完全平方数来检查它是否具有奇数个因子。

因此，本题就变成了[1,n]中有多少完全平方数，我们可以对n求平方根，对于[1, int(sqrt(n))]的数的平方都会在[1,n]中，并且是完全平方数，因此，本题的结果就是int(sqrt(n))

总结：求最终灯泡亮的数量，就是就因数数量为奇数的数的数量，就是求是完全平方数的数的数量，就是int(sqrt(n))

# 代码

class Solution(object):
    def bulbSwitch(self, n):
        """
        :type n: int
        :rtype: int
        """
        return int(sqrt(n))
        

