#############题目描述################

给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

###################思路###################

二分查找，找到左边界和右边界

##################代码####################

class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums and len(nums) <= 0:
            return [-1, -1]
        l = self.searchLeft(nums, target)
        r = self.searchRight(nums, target)
        return [l, r]
    

    def searchLeft(self, nums, target):
        l, r = 0, len(nums)-1
        while l <= r:
            mid = l + (r-l)/2
            if nums[mid] == target:
                if mid > 0 and nums[mid] == nums[mid-1]:
                    r = mid - 1
                else:
                    return mid
            elif nums[mid] > target:
                r = mid - 1
            else:
                l = mid + 1
        return -1
        
       
    
    def searchRight(self, nums, target):
        l, r = 0, len(nums)-1
        while l <= r:
            mid = l + (r-l)/2
            if nums[mid] == target:
                if mid < len(nums)-1 and nums[mid] == nums[mid+1]:
                    l = mid + 1
                else:
                    return mid
            elif nums[mid] > target:
                r = mid - 1
            else:
                l = mid + 1
        return -1
       
