#################题目描述##################

给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

#####################思路######################

分治+递归

二叉搜索树即左子树小于根小于右子树

对于1到n的每个数字都有可能是根，假设为i，则1~i的数为左子树，i+1~n的数为右子树

###################代码#########################

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        if n <= 0:
            return []
        return self.buildTree(1, n)
    
    def buildTree(self, start, end):
        res = []
        if start > end:
            res.append(None)
        for i in range(start, end+1):
            for l in self.buildTree(start, i-1):
                for r in self.buildTree(i+1, end):
                    root = TreeNode(i)
                    root.left = l
                    root.right = r
                    res.append(root)
        return res
