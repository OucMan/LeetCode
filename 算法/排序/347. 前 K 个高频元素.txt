##################题目描述###################

给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
 

提示：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。
题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的。
你可以按任意顺序返回答案。

#############思路###########

计数获得结果（可使用Counter）

###########代码1############

class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        data = {}
        for i in nums:
            if i in data:
                data[i] = data[i] + 1
            else:
                data[i] = 1
        tmp = sorted(data.items(), key=lambda e: e[1], reverse=True)
        res = []
        for i in range(k):
            res.append(tmp[i][0])
        return res
        
#############代码2###############

from collections import Counter

class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        count = Counter(nums)
        data = count.most_common(k)
        res = []
        for d in data:
            res.append(d[0])
        return res

