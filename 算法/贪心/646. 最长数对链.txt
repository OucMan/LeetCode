################题目描述######################

给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。

现在，我们定义一种跟随关系，当且仅当 b < c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。

给定一个对数集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。

示例 :

输入: [[1,2], [2,3], [3,4]]
输出: 2
解释: 最长的数对链是 [1,2] -> [3,4]
注意：

给出数对的个数在 [1, 1000] 范围内。

###############思路###############

按照右边界排序，然后查看不重叠区间

###############代码##################

class Solution(object):
    def findLongestChain(self, pairs):
        """
        :type pairs: List[List[int]]
        :rtype: int
        """
        if not pairs:
            return 0
        pairs.sort(cmp=self.mycmp)
        res = 1
        cur = pairs[0]
        for item in pairs[1:]:
            if item[0] > cur[1]:
                res += 1
                cur = item
        return res
        
    def mycmp(self, a, b):
        if a[1] > b[1] or (a[1]==b[1] and a[0] > b[0]):
            return 1
        else:
            return -1
