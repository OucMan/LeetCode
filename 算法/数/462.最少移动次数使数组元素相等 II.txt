#################题目描述#################

给定一个非空整数数组，找到使所有数组元素相等所需的最小移动数，其中每次移动可将选定的一个元素加1或减1。 您可以假设数组的长度最多为10000。

例如:

输入:
[1,2,3]

输出:
2

说明：
只有两个动作是必要的（记得每一步仅可使其中一个元素加1或减1）： 

[1,2,3]  =>  [2,2,3]  =>  [2,2,2]

#################思路#####################

本题主要是通过查找中间位置的数，然后进行移动步数，最后将移动步数全部求和

################代码################

class Solution(object):
    def minMoves2(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        tmp = 0
        if len(nums) & 2 == 0:
            tmp = (nums[(len(nums)-1)/2] + nums[len(nums)/2]) / 2
        else:
            tmp = nums[len(nums)/2]
        res = 0
        for n in nums:
            res += abs(n-tmp)
        return res
