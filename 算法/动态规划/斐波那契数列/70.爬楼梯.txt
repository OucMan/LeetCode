################题目描述################

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

#################思路########################
对于n阶的楼梯，假设有f(n)中走法，假如第一步走一阶，则还有f(n-1)中走法，假如第一步走2阶，则还有f(n-2)种走法，所以：
f(n) = f(n-1) + f(n-2)

###################代码#######################

class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n == 1:
            return 1
        if n == 2:
            return 2
        res = [0,1,2]
        for i in range(3,n+1):
            res.append(res[-1]+res[-2])
            
        return res[-1]
