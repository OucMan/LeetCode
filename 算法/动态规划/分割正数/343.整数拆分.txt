############题意描述#############

给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

#############思路##################

1、数学法，尽量的取3，注意最后为4的时候，取2和2，而不是3和1

2、动态规划，n>=7时，dp[i] = dp[i-3]*3，其中dp保存最大乘积

###############代码################
思路1

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n==1: return 0
        if n==2: return 1
        if n==3: return 2
        if n==4: return 4
        res = 1
        while n>4:
            res = res * 3
            n = n-3
        return res * n


思路2

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0,0,1,2,4,6,9]
        for i in range(7,n+1):
            dp.append(dp[i-3]*3)
        
        return dp[n]
