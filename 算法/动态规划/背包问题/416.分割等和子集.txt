#################题目描述####################
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
注意:
每个数组中的元素不会超过 100
数组的大小不会超过 200
示例 1:
输入: [1, 5, 11, 5]
输出: true
解释: 数组可以分割成 [1, 5, 5] 和 [11].
示例 2:
输入: [1, 2, 3, 5]
输出: false
解释: 数组不能分割成两个元素和相等的子集.

####################思路#########################

如果数组的和是奇数，那么肯定不能出现和的一半，因为每个元素都是整数

将target设置为数组和的一半,利用01背包问题的思路，设置dp[i][j]为前i个数字的和能不能构成整数j，因此可以得到转移方程：
dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]，即遍历到i位置时能不能构成target = 前面的数字的和能够成target || 前面的数字能构成target - nums[i]。这两个状态分别是选不选取nums[i]的两种情况，如果有一种情况成立即可。再根据空间优化的方式得到解法

###################代码######################

class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if not nums:
            return False
        target = sum(nums)
        if target % 2 !=0:
            return False
        target = target / 2
        dp = [False] * (target+1)
        dp[0] = True
        for i in range(len(nums)):
            for j in range(target, nums[i]-1, -1):
                dp[j] = dp[j] or dp[j-nums[i]]
        return dp[-1]
        
        
