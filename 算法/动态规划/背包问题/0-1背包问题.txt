##################题目描述#########################

假设我们有n件物品，分别编号为1, 2...n。其中编号为i的物品价值为vi，它的重量为wi。为了简化问题，假定价值和重量都是整数值。现在，假设我们有一个背包，它能够承载的重量是W。现在，我们希望往包里装这些物品，使得包里装的物品价值最大化，那么我们该如何来选择装的东西呢？因为我们要么选取某个物品，要么不能选取，而不能只选取一个物品的一部分，因此这个问题又叫做0-1背包问题。

####################思路#####################

假定我们定义一个函数c[i, w]表示到第i个元素为止，在限制总重量为w的情况下我们所能选择到的最优解。那么这个最优解要么包含有i这个物品，要么不包含，肯定是这两种情况中的一种。如果我们选择了第i个物品，那么实际上这个最优解是c[i - 1, w-wi] + vi。而如果我们没有选择第i个物品，这个最优解是c[i-1, w]。这样，实际上对于到底要不要取第i个物品，我们只要比较这两种情况，选择两种情况中的最大值，即为最优解。如果商品i的重量大于总重量限制，那么我们肯定不能选它，这时的最优解就是c[i-1, w]。对于初始情况，很明显c[0, w]里不管w是多少，肯定为0。因为它表示我们一个物品都不选择的情况。c[i, 0]也一样，当我们总重量限制为0时，肯定价值为0。

基于上面的描述，可以得到下面的公式

c[i,w] = 0  if i=0 or w=0
c[i,w] = c[i-1,w] if wi > w
c[i,w] = max(vi + c[i-1, w-wi], c[i-1, w]) if i> 0 and w >= wi

具体的实现：这一组物品分别有价值和重量，我们可以定义两个数组int[] v, int[] w。v[i]表示第i个物品的价值，w[i]表示第i个物品的重量。为了表示c[i, w]，我们可以使用一个int[i][w]的矩阵。其中i的最大值为物品的数量，而w表示最大的重量限制。按照前面的递推关系，c[i][0]和c[0][w]都是0。而我们所要求的最终结果是c[n][w]。所以我们实际中创建的矩阵是(n + 1) x (w + 1)的规格。

###############代码###################

获得最优解

def bag_01(weights, values, capicity):
    n = len(values)
    f = [[0 for j in range(capicity+1)] for i in range(n+1)]
    for i in range(1, n+1):
        for j in range(1, capicity+1):
            if weights[i-1] > j:
                f[i][j] = f[i-1][j]
            else:
                f[i][j] = max(f[i-1][j-weights[i-1]] + values[i-1], f[i-1][j])
    return f[-1][-1]
    
打印出最优方案

def show(capicity, weights, f):
    n = len(weights)
    print("最大价值:", f[n][capicity])
    x = [False for i in range(n)]
    j = capicity
    for i in range(n, 0, -1):
        if f[i][j] > f[i-1][j]:
            x[i-1] = True
            j -= weights[i-1]
    print("背包中所装物品为:")
    for i in range(n):
        if x[i]:
            print("第{}个".format(i+1))



