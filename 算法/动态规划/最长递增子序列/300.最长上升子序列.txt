#############题目描述################


给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?

###############思路###############

动态规划：复杂度O(n2) 

dp[n] 表示以 Sn 结尾的序列的最长递增子序列长度。对于一个递增子序列 {Si1, Si2,...,Sim}，如果 im < n 并且 Sim < Sn，此时 {Si1, Si2,..., Sim, Sn} 为一个递增子序列，递增子序列的长度增加 1。满足上述条件的递增子序列中，长度最长的那个递增子序列就是要找的，在长度最长的递增子序列上加上 Sn 就构成了以 Sn 为结尾的最长递增子序列。因此 dp[n] = max{ dp[i]+1 | Si < Sn && i < n} 。因为在求 dp[n] 时可能无法找到一个满足条件的递增子序列，此时 {Sn} 就构成了递增子序列，需要对前面的求解方程做修改，令 dp[n] 最小为 1，即：dp[n] = max{1， dp[i]+1 | Si < Sn && i < n}

二分查找：复杂度O(n log n)

使用一个辅助List，队列的最后一个数为当前的最大值，只要新进入的数大于最后一个数就插到队尾，否则在前面找个位置替换上去，保持升序（查找位置的过程是二分查找过程），最后列表的长度就是结果，即最长升序序列的长度。

##################代码################

思路1

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) <= 0:
            return 0
        if len(nums) == 1:
            return 1
        n = len(nums)
        dp = [1] * n
        for i in range(1,n):
            tmp = 1
            for j in range(0,i):
                if nums[i] > nums[j]:
                    tmp = max(tmp, dp[j]+1)
            dp[i] = tmp
        return max(dp)

思路2

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) <= 0:
            return 0
        if len(nums) == 1:
            return 1
        a=[]
        a.append(nums[0])
        for i in range(1,len(nums)):
            if nums[i]>a[-1]:
                a.append(nums[i])
            else:
                if nums[i]<a[0]:
                    a[0]=nums[i]
                else:
                    position=self.binarySearch(a,nums[i],0,len(a)-1)
                    a[position]=nums[i]
        return len(a)
            
    def binarySearch(self,a,number,left,right):
        if left==right:
            return left
        while left<right:
            mid=(left+right)/2
            if mid==left or mid==right:
                if number>a[left]:
                    return right
                else:
                    return left
            if number<a[mid]:
                return self.binarySearch(a,number,left,mid)
            else:
                return self.binarySearch(a,number,mid,right)
