###################题目描述#######################

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

###################思路########################
创建输入相同大小的辅助矩阵，辅助矩阵中保存每一个位置到原点的最短距离，因此每一个节点的值只和它上面的节点和左面的节点有关。

####################代码#####################

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if not grid or len(grid) <= 0 or len(grid[0]) <= 0:
            return 0
        
        rows = len(grid)
        cols = len(grid[0])
        dp = grid
        for i in range(1, rows):
            dp[i][0] = dp[i-1][0] + grid[i][0]
        for j in range(1, cols):
            dp[0][j] = dp[0][j-1] + grid[0][j]
        for i in range(1, rows):
            for j in range(1, cols):
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])

        return dp[rows-1][cols-1]
        
