##################题目描述####################

在一个 N × N 的方形网格中，每个单元格有两种状态：空（0）或者阻塞（1）。

一条从左上角到右下角、长度为 k 的畅通路径，由满足下述条件的单元格 C_1, C_2, ..., C_k 组成：

相邻单元格 C_i 和 C_{i+1} 在八个方向之一上连通（此时，C_i 和 C_{i+1} 不同且共享边或角）
C_1 位于 (0, 0)（即，值为 grid[0][0]）
C_k 位于 (N-1, N-1)（即，值为 grid[N-1][N-1]）
如果 C_i 位于 (r, c)，则 grid[r][c] 为空（即，grid[r][c] == 0）
返回这条从左上角到右下角的最短畅通路径的长度。如果不存在这样的路径，返回 -1 。

提示：

1 <= grid.length == grid[0].length <= 100
grid[i][j] 为 0 或 1

######################思路########################
像求最短路径之类的题目，一般可使用广度优先遍历+队列的形式解决

队列中加入起点
判断队列是否为空，循环
    取出队首，检测是否满足条件
    是则返回
    遍历下一步的所有可能情况，并加入到队列中


###################代码#########################

class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if grid[0][0] == 1 or grid[-1][-1] == 1:
            return -1
        n = len(grid)
        queue = [(0,0,1)]
        directions = [[1,0],[-1,0],[0,1],[0,-1],[1,1],[1,-1],[-1,1],[-1,-1]]
        while queue:
            cur_x, cur_y, cur_dis = queue.pop(0)
            if cur_x == n-1 and cur_y == n-1:
                return cur_dis
            for item in directions:
                next_x, next_y = cur_x + item[0], cur_y + item[1]
                if 0 <= next_x < n and 0<= next_y < n and not grid[next_x][next_y]:
                    queue.append((next_x, next_y, cur_dis+1))
                    grid[next_x][next_y] = 1
        return -1
