################题目描述################

给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

##############思路#################

即求解从n到0的最短路径，路径节点时完全平方数，故使用广度优先遍历+队列

#############代码################

class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        queue = [(n,0)]
        visited = [False] * (n+1)

        while queue:
            cur_value, cur_step = queue.pop(0)
            i = 1
            next_value = cur_value - i**2
            while next_value>=0:
                if next_value == 0:
                    return cur_step+1
                if not visited[next_value]:
                    queue.append((next_value, cur_step+1))
                    visited[next_value] = True
                i = i + 1
                next_value = cur_value - i**2
