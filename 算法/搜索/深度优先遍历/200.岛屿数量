############题目描述############

给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

#############代码##############

class Solution(object):
    step = 0
    next_move = [[0,1],[0,-1],[1,0],[-1,0]]

    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid or len(grid)<=0 or len(grid[0])<=0:
            return 0
        res = 0
        rows = len(grid)
        cols = len(grid[0])
        for i in range(rows):
            for j in range(cols):
                if grid[i][j] == '1':
                    self.step = 0
                    self.dfs(grid, i, j)
                    if self.step >= 1:
                        res += 1
        return res
    
    def dfs(self, grid, row, col):
        if row<0 or row>len(grid)-1 or col<0 or col>len(grid[0])-1 or grid[row][col] != '1':
            return
        grid[row][col] = '-1'
        self.step +=1
        for d in self.next_move:
            self.dfs(grid, row+d[0], col+d[1])
                    
        
