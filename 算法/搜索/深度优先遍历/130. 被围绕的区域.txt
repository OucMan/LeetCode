################题目描述#################

给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

#################解题思路######################

搜索四个边界上的O点，并以此对它们进行深度遍历搜索，找到它们所能联通的最大区域，将剩余的O变为X

#################代码#####################

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        if not board or len(board)<=0 or len(board[0])<=0:
            return []
        rows = len(board)
        cols = len(board[0])

        for i in range(rows):
            self.dfs(board, i, 0)
            self.dfs(board, i, cols-1)
        for i in range(cols):
            self.dfs(board, 0, i)
            self.dfs(board, rows-1, i)
        
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == '*':
                    board[i][j] = 'O'
                elif board[i][j] == 'O':
                    board[i][j] = 'X'
    
    def dfs(self, board, row, col):
        if row<0 or row>len(board)-1 or col<0 or col>len(board[0])-1 or board[row][col]!='O':
            return
        board[row][col] = '*'
        self.dfs(board, row+1, col)
        self.dfs(board, row-1, col)
        self.dfs(board, row, col-1)
        self.dfs(board, row, col+1)
