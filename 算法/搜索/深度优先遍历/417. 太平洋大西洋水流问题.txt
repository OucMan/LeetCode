##############题目描述#################

给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。

规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。

请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。

提示：

输出坐标的顺序不重要
m 和 n 都小于150
 
示例：

给定下面的 5x5 矩阵:

  太平洋 ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * 大西洋

返回:

[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).

################解题思路####################

从边界开始找，分别查看能到太平洋和大西洋的节点集合，然后求交集

##################代码###################
class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        if not matrix or len(matrix)<=0 or len(matrix[0])<=0:
            return []
        rows = len(matrix)
        cols = len(matrix[0])
        p_visited = [[False]*cols for _ in range(rows)]
        a_visited = [[False]*cols for _ in range(rows)]

        for i in range(rows):
            self.dfs(matrix, p_visited, rows, cols, i, 0)
            self.dfs(matrix, a_visited, rows, cols, i, cols-1)
        for i in range(cols):
            self.dfs(matrix, p_visited, rows, cols, 0, i)
            self.dfs(matrix, a_visited, rows, cols, rows-1, i)
        
        res = []
        for i in range(rows):
            for j in range(cols):
                if p_visited[i][j] and a_visited[i][j]:
                    res.append([i,j])
        return res
    
    def dfs(self, matrix, visited, rows, cols, row, col):
        visited[row][col] = True
        directions = [[1,0],[-1,0],[0,1],[0,-1]]
        for d in directions:
            next_x, next_y = row+d[0], col+d[1]
            if next_x<0 or next_x>rows-1 or next_y<0 or next_y>cols-1 or visited[next_x][next_y] or matrix[row][col] > matrix[next_x][next_y]:
                continue
            self.dfs(matrix, visited, rows, cols, next_x, next_y)  

        
