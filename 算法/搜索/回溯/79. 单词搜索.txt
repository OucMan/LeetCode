#############题目描述##################

给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false
 
提示：

board 和 word 中只包含大写和小写英文字母。
1 <= board.length <= 200
1 <= board[i].length <= 200
1 <= word.length <= 10^3

################代码##################

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        rows = len(board)
        cols = len(board[0])
        for i in range(rows):
            for j in range(cols):
                visited = [[False]*cols for _ in range(rows)]
                if self.helper(board, word, visited, i, j, 0):
                    return True
        return False
    
    def helper(self, board, word, visited, row, col, index):
        if index == len(word):
            return True
        next_char = False
        if 0<=row<len(board) and 0<=col<len(board[0]) and not visited[row][col] and board[row][col] == word[index]:
            visited[row][col] = True
            index += 1
            next_char = self.helper(board, word, visited, row+1, col, index) or self.helper(board, word, visited, row-1, col, index) or self.helper(board, word, visited, row, col+1, index) or self.helper(board, word, visited, row, col-1, index)
            if not next_char:
                visited[row][col] = False
                index -= 1
        return next_char
            
