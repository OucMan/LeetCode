###############题目描述################

给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231

###############思路###################
将数字转成字符串

translateNum(s) = translateNum(s[1:]) + translateNum(s[2:])

只是在计算translateNum(s[2:])的时候首先判断s[:2]对应的整数范围为0-25，同时s[0]!='0'

#################代码###################

class Solution(object):
    def translateNum(self, num):
        """
        :type num: int
        :rtype: int
        """
        num = str(num)
        if len(num) <= 1:
            return len(num)
        res = 0
        res = self.translateNum(int(num[1:]))

        if num[0] != '0' and int(num[:2]) < 26:
            if num[2:]:
                res += self.translateNum(int(num[2:]))
            else:
                res += 1 
        return res
        
